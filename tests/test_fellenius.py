"""
Test funcional para el m√©todo de Fellenius.

Valida:
- C√°lculo correcto del factor de seguridad
- Manejo de casos t√≠picos (talud homog√©neo, con nivel fre√°tico)
- Validaciones de entrada y salida
- Generaci√≥n de reportes
- Comparaci√≥n con valores te√≥ricos
"""

import sys
import os
import math

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from data.models import Estrato, CirculoFalla
from core.fellenius import (
    analizar_fellenius, fellenius_talud_homogeneo, fellenius_con_nivel_freatico,
    generar_reporte_fellenius, comparar_con_factor_teorico
)
from core.geometry import crear_perfil_simple, crear_nivel_freatico_horizontal


def test_fellenius_talud_homogeneo():
    """Test del m√©todo de Fellenius para talud homog√©neo."""
    print("\n=== TEST FELLENIUS - TALUD HOMOG√âNEO ===")
    
    try:
        # Caso t√≠pico: talud 1:1.5 (33.7¬∞), altura 10m
        resultado = fellenius_talud_homogeneo(
            altura=10.0,
            angulo_talud=33.7,  # Talud 1:1.5
            cohesion=20.0,      # kPa
            phi_grados=25.0,    # grados
            gamma=18.0,         # kN/m¬≥
            factor_radio=1.3,
            num_dovelas=12
        )
        
        print(f"‚úÖ Factor de Seguridad: {resultado.factor_seguridad:.3f}")
        print(f"   Momento Resistente: {resultado.momento_resistente:.1f} kN¬∑m")
        print(f"   Momento Actuante: {resultado.momento_actuante:.1f} kN¬∑m")
        print(f"   N√∫mero de dovelas: {len(resultado.dovelas)}")
        print(f"   Dovelas en tracci√≥n: {resultado.detalles_calculo['dovelas_en_traccion']}")
        print(f"   Resultado v√°lido: {resultado.es_valido}")
        
        # Verificar rangos esperados
        assert 0.8 <= resultado.factor_seguridad <= 2.5, f"Fs fuera de rango: {resultado.factor_seguridad}"
        assert abs(resultado.momento_resistente) > 0, "Momento resistente debe ser positivo"
        assert abs(resultado.momento_actuante) > 0, "Momento actuante debe ser positivo"
        assert len(resultado.dovelas) == 12, "N√∫mero incorrecto de dovelas"
        
        print("‚úÖ Test talud homog√©neo PASADO")
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error en test talud homog√©neo: {e}")
        raise


def test_fellenius_con_nivel_freatico():
    """Test del m√©todo de Fellenius con nivel fre√°tico."""
    print("\n=== TEST FELLENIUS - CON NIVEL FRE√ÅTICO ===")
    
    try:
        # Mismo talud pero con nivel fre√°tico a 3m de profundidad
        resultado = fellenius_con_nivel_freatico(
            altura=10.0,
            angulo_talud=33.7,
            cohesion=20.0,
            phi_grados=25.0,
            gamma=18.0,
            gamma_sat=20.0,      # kN/m¬≥ saturado
            profundidad_freatico=3.0,  # m desde superficie
            factor_radio=1.3,
            num_dovelas=12
        )
        
        print(f"‚úÖ Factor de Seguridad: {resultado.factor_seguridad:.3f}")
        print(f"   Momento Resistente: {resultado.momento_resistente:.1f} kN¬∑m")
        print(f"   Momento Actuante: {resultado.momento_actuante:.1f} kN¬∑m")
        print(f"   Dovelas en tracci√≥n: {resultado.detalles_calculo['dovelas_en_traccion']}")
        
        # El nivel fre√°tico deber√≠a reducir el factor de seguridad
        assert 0.5 <= resultado.factor_seguridad <= 2.0, f"Fs fuera de rango: {resultado.factor_seguridad}"
        assert resultado.es_valido, "Resultado debe ser v√°lido"
        
        print("‚úÖ Test con nivel fre√°tico PASADO")
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error en test con nivel fre√°tico: {e}")
        raise


def test_fellenius_manual():
    """Test manual con geometr√≠a espec√≠fica."""
    print("\n=== TEST FELLENIUS - CASO MANUAL ===")
    
    try:
        # Crear geometr√≠a manual
        perfil = crear_perfil_simple(0.0, 8.0, 20.0, 0.0, 15)
        
        # C√≠rculo de falla espec√≠fico
        circulo = CirculoFalla(xc=8.0, yc=12.0, radio=10.0)
        
        # Estrato con par√°metros conocidos
        estrato = Estrato(
            cohesion=15.0,    # kPa
            phi_grados=30.0,  # grados
            gamma=19.0,       # kN/m¬≥
            nombre="Manual"
        )
        
        # An√°lisis
        resultado = analizar_fellenius(
            circulo=circulo,
            perfil_terreno=perfil,
            estrato=estrato,
            num_dovelas=10
        )
        
        print(f"‚úÖ Factor de Seguridad: {resultado.factor_seguridad:.3f}")
        print(f"   Centro c√≠rculo: ({circulo.xc}, {circulo.yc})")
        print(f"   Radio: {circulo.radio} m")
        print(f"   N√∫mero dovelas: {len(resultado.dovelas)}")
        
        # Verificar consistencia
        assert resultado.factor_seguridad > 0, "Factor de seguridad debe ser positivo"
        assert len(resultado.dovelas) == 10, "N√∫mero incorrecto de dovelas"
        assert resultado.es_valido, "Resultado debe ser v√°lido"
        
        print("‚úÖ Test manual PASADO")
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error en test manual: {e}")
        raise


def test_generacion_reporte():
    """Test de generaci√≥n de reportes."""
    print("\n=== TEST GENERACI√ìN DE REPORTE ===")
    
    try:
        # Usar resultado de test anterior
        resultado = fellenius_talud_homogeneo(
            altura=8.0, angulo_talud=30.0, cohesion=25.0, 
            phi_grados=28.0, gamma=19.0, num_dovelas=8
        )
        
        # Generar reporte
        reporte = generar_reporte_fellenius(resultado)
        
        # Verificar contenido del reporte
        assert "M√âTODO DE FELLENIUS" in reporte, "T√≠tulo faltante en reporte"
        assert f"{resultado.factor_seguridad:.3f}" in reporte, "Factor de seguridad faltante"
        assert "EQUILIBRIO DE MOMENTOS" in reporte, "Secci√≥n de momentos faltante"
        assert "AN√ÅLISIS DE DOVELAS" in reporte, "Secci√≥n de dovelas faltante"
        
        print("‚úÖ Reporte generado correctamente")
        print(f"   Longitud del reporte: {len(reporte)} caracteres")
        
        lineas = reporte.split('\n')
        print(f"   L√≠neas del reporte: {len(lineas)}")

        # Mostrar parte del reporte
        print("\nüìã EXTRACTO DEL REPORTE:")
        for i, linea in enumerate(lineas[:15]):  # Primeras 15 l√≠neas
            print(f"   {linea}")
        if len(lineas) > 15:
            print("   ...")
        
        print("‚úÖ Test generaci√≥n reporte PASADO")
        return reporte
        
    except Exception as e:
        print(f"‚ùå Error en test generaci√≥n reporte: {e}")
        raise


def test_comparacion_teorica():
    """Test de comparaci√≥n con valores te√≥ricos."""
    print("\n=== TEST COMPARACI√ìN TE√ìRICA ===")
    
    try:
        # Caso con factor de seguridad esperado conocido
        resultado = fellenius_talud_homogeneo(
            altura=10.0, angulo_talud=45.0, cohesion=30.0,
            phi_grados=20.0, gamma=18.0, num_dovelas=10
        )
        
        # Comparar con valor te√≥rico estimado
        factor_teorico = 1.2  # Valor esperado aproximado
        comparacion = comparar_con_factor_teorico(resultado, factor_teorico, tolerancia=0.3)
        
        print(f"‚úÖ Factor calculado: {comparacion['factor_calculado']:.3f}")
        print(f"   Factor te√≥rico: {comparacion['factor_teorico']:.3f}")
        print(f"   Diferencia: {comparacion['diferencia_absoluta']:.3f}")
        print(f"   Diferencia relativa: {comparacion['diferencia_relativa_pct']:.1f}%")
        print(f"   Es consistente: {comparacion['es_consistente']}")
        print(f"   {comparacion['mensaje']}")
        
        # Verificar que la comparaci√≥n funciona
        assert 'factor_calculado' in comparacion, "Campo faltante en comparaci√≥n"
        assert 'es_consistente' in comparacion, "Campo de consistencia faltante"
        
        print("‚úÖ Test comparaci√≥n te√≥rica PASADO")
        return comparacion
        
    except Exception as e:
        print(f"‚ùå Error en test comparaci√≥n te√≥rica: {e}")
        raise


def test_casos_limite():
    """Test de casos l√≠mite y validaciones."""
    print("\n=== TEST CASOS L√çMITE ===")
    
    try:
        # Caso con cohesi√≥n muy alta (deber√≠a dar Fs alto)
        resultado_alta_cohesion = fellenius_talud_homogeneo(
            altura=5.0, angulo_talud=30.0, cohesion=100.0,  # Cohesi√≥n muy alta
            phi_grados=25.0, gamma=18.0, num_dovelas=8
        )
        
        print(f"‚úÖ Alta cohesi√≥n - Fs: {resultado_alta_cohesion.factor_seguridad:.3f}")
        assert resultado_alta_cohesion.factor_seguridad > 2.0, "Fs deber√≠a ser alto con alta cohesi√≥n"
        
        # Caso con √°ngulo de fricci√≥n alto
        resultado_alto_phi = fellenius_talud_homogeneo(
            altura=5.0, angulo_talud=30.0, cohesion=10.0,
            phi_grados=35.0, gamma=18.0, num_dovelas=8  # √Ångulo alto
        )
        
        print(f"‚úÖ Alto œÜ - Fs: {resultado_alto_phi.factor_seguridad:.3f}")
        assert resultado_alto_phi.factor_seguridad > 1.0, "Fs deber√≠a ser razonable con alto œÜ"
        
        # Verificar que ambos casos son v√°lidos
        assert resultado_alta_cohesion.es_valido, "Caso alta cohesi√≥n debe ser v√°lido"
        assert resultado_alto_phi.es_valido, "Caso alto œÜ debe ser v√°lido"
        
        print("‚úÖ Test casos l√≠mite PASADO")
        
    except Exception as e:
        print(f"‚ùå Error en test casos l√≠mite: {e}")
        raise


def ejecutar_todos_los_tests():
    """Ejecuta todos los tests de Fellenius."""
    print("üß™ INICIANDO TESTS DEL M√âTODO DE FELLENIUS")
    print("=" * 50)
    
    tests_pasados = 0
    tests_totales = 6
    
    try:
        # Test 1: Talud homog√©neo
        test_fellenius_talud_homogeneo()
        tests_pasados += 1
        
        # Test 2: Con nivel fre√°tico
        test_fellenius_con_nivel_freatico()
        tests_pasados += 1
        
        # Test 3: Caso manual
        test_fellenius_manual()
        tests_pasados += 1
        
        # Test 4: Generaci√≥n de reporte
        test_generacion_reporte()
        tests_pasados += 1
        
        # Test 5: Comparaci√≥n te√≥rica
        test_comparacion_teorica()
        tests_pasados += 1
        
        # Test 6: Casos l√≠mite
        test_casos_limite()
        tests_pasados += 1
        
    except Exception as e:
        print(f"\n‚ùå ERROR GENERAL: {e}")
    
    # Resumen final
    print("\n" + "=" * 50)
    print(f"üéØ RESUMEN DE TESTS - M√âTODO FELLENIUS")
    print(f"   Tests pasados: {tests_pasados}/{tests_totales}")
    print(f"   Porcentaje √©xito: {(tests_pasados/tests_totales)*100:.1f}%")
    
    if tests_pasados == tests_totales:
        print("‚úÖ TODOS LOS TESTS PASARON - M√âTODO FELLENIUS FUNCIONANDO")
    else:
        print(f"‚ö†Ô∏è {tests_totales - tests_pasados} TESTS FALLARON")
    
    print("=" * 50)
    return tests_pasados == tests_totales


if __name__ == "__main__":
    ejecutar_todos_los_tests()
