"""
Tests funcionales para el m√≥dulo de visualizaci√≥n.

Verifica que todas las funciones de plotting funcionen correctamente
con datos reales de an√°lisis de estabilidad.
"""

import sys
import os
import math
import matplotlib.pyplot as plt

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from visualization.plotting import *
from data.models import CirculoFalla, Dovela, Estrato
from core.geometry import crear_perfil_simple, crear_nivel_freatico_horizontal
from core.fellenius import analizar_fellenius, fellenius_talud_homogeneo
from core.bishop import analizar_bishop, bishop_talud_homogeneo


def test_plotting_completo():
    """Test completo de todas las funciones de plotting."""
    print("üß™ INICIANDO TESTS DE VISUALIZACI√ìN")
    print("=" * 50)
    
    # === TEST 1: Configuraci√≥n b√°sica ===
    print("=== TEST 1: Configuraci√≥n y estilo ===")
    
    configurar_estilo_grafico()
    config = ConfiguracionGrafico()
    print(f"‚úÖ Configuraci√≥n creada: {config.figsize}")
    
    # === TEST 2: Gr√°fico b√°sico ===
    print("\n=== TEST 2: Gr√°fico b√°sico de perfil ===")
    
    # Crear geometr√≠a simple
    perfil = crear_perfil_simple(0.0, 10.0, 30.0, 0.0, 20)
    circulo = CirculoFalla(xc=15.0, yc=15.0, radio=12.0)
    
    fig1 = graficar_perfil_basico(perfil, circulo, "Test Perfil B√°sico")
    print("‚úÖ Gr√°fico b√°sico creado")
    
    # Definir variables comunes para todos los tests
    longitud_base = 8.0 / math.tan(math.radians(30.0))
    perfil_vis = crear_perfil_simple(0.0, 8.0, longitud_base * 3, 0.0, 25)
    circulo_vis = CirculoFalla(xc=longitud_base * 0.5, yc=10.0, radio=1.2 * 8.0)
    
    # === TEST 3: An√°lisis completo de Fellenius ===
    print("\n=== TEST 3: Visualizaci√≥n Fellenius ===")
    
    try:
        # Usar la misma geometr√≠a que Bishop para comparaci√≥n coherente
        estrato_fel = Estrato(cohesion=25.0, phi_grados=20.0, gamma=18.0, nombre="Arena")
        
        resultado_fellenius = analizar_fellenius(
            circulo=circulo_vis,
            perfil_terreno=perfil_vis,
            estrato=estrato_fel,
            num_dovelas=8
        )
        
        fig2 = graficar_resultado_fellenius(perfil_vis, circulo_vis, resultado_fellenius)
        print(f"‚úÖ Gr√°fico Fellenius: Fs = {resultado_fellenius.factor_seguridad:.3f}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error en Fellenius: {e}")
        # Crear figura b√°sica para completar el test
        fig2 = graficar_perfil_basico(perfil_vis, circulo_vis, "Fellenius (geometr√≠a incompatible)")
        resultado_fellenius = None
        print("‚úÖ Gr√°fico b√°sico creado como alternativa")
    
    # === TEST 4: An√°lisis completo de Bishop ===
    print("\n=== TEST 4: Visualizaci√≥n Bishop ===")
    
    try:
        resultado_bishop = bishop_talud_homogeneo(
            altura=8.0,
            angulo_talud=30.0,
            cohesion=25.0,
            phi_grados=20.0,
            gamma=18.0,
            num_dovelas=8
        )
        
        fig3 = graficar_resultado_bishop(perfil_vis, circulo_vis, resultado_bishop)
        print(f"‚úÖ Gr√°fico Bishop: Fs = {resultado_bishop.factor_seguridad:.3f}, {resultado_bishop.iteraciones} iter")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error en Bishop: {e}")
        fig3 = None
    
    # === TEST 5: Comparaci√≥n de m√©todos ===
    print("\n=== TEST 5: Comparaci√≥n de m√©todos ===")
    
    if fig2 is not None and fig3 is not None and resultado_fellenius is not None:
        try:
            # Usar geometr√≠a com√∫n para comparaci√≥n
            fig4 = graficar_comparacion_metodos(perfil_vis, circulo_vis, 
                                              resultado_fellenius, resultado_bishop)
            diferencia = ((resultado_bishop.factor_seguridad - resultado_fellenius.factor_seguridad) / 
                         resultado_fellenius.factor_seguridad) * 100
            print(f"‚úÖ Comparaci√≥n creada: diferencia {diferencia:+.1f}%")
        except Exception as e:
            print(f"‚ö†Ô∏è Error en comparaci√≥n: {e}")
            fig4 = None
    else:
        print("‚ö†Ô∏è Saltando comparaci√≥n - geometr√≠a incompatible entre m√©todos")
        fig4 = None
    
    # === TEST 6: Gr√°fico con nivel fre√°tico ===
    print("\n=== TEST 6: Gr√°fico con nivel fre√°tico ===")
    
    try:
        # Crear nivel fre√°tico
        nivel_freatico = crear_nivel_freatico_horizontal(0.0, longitud_base * 3, 4.0)
        
        # Usar dovelas del resultado de Bishop si est√° disponible
        dovelas_nf = resultado_bishop.dovelas if fig3 is not None else []
        fs_nf = resultado_bishop.factor_seguridad if fig3 is not None else 1.5
        
        if dovelas_nf:
            fig5 = graficar_con_nivel_freatico(perfil_vis, circulo_vis, nivel_freatico, 
                                             dovelas_nf, fs_nf, "Bishop con Agua")
            print("‚úÖ Gr√°fico con nivel fre√°tico creado")
        else:
            print("‚ö†Ô∏è Sin dovelas para nivel fre√°tico")
            fig5 = None
            
    except Exception as e:
        print(f"‚ö†Ô∏è Error con nivel fre√°tico: {e}")
        fig5 = None
    
    # === TEST 7: Convergencia Bishop ===
    print("\n=== TEST 7: Gr√°fico de convergencia ===")
    
    if fig3 is not None and hasattr(resultado_bishop, 'historial_fs'):
        try:
            fig6 = graficar_convergencia_bishop(resultado_bishop.historial_fs)
            print(f"‚úÖ Convergencia graficada: {len(resultado_bishop.historial_fs)} iteraciones")
        except Exception as e:
            print(f"‚ö†Ô∏è Error en convergencia: {e}")
            fig6 = None
    else:
        print("‚ö†Ô∏è Sin historial de convergencia disponible")
        fig6 = None
    
    # === TEST 8: Funciones auxiliares ===
    print("\n=== TEST 8: Funciones auxiliares ===")
    
    # Test interpolaci√≥n
    test_perfil = [(0, 0), (5, 5), (10, 8), (15, 6)]
    from visualization.plotting import _interpolar_elevacion, _calcular_y_circulo
    y_interp = _interpolar_elevacion(test_perfil, 7.5)
    print(f"‚úÖ Interpolaci√≥n: y(7.5) = {y_interp:.2f}")
    
    # Test c√≠rculo
    test_circulo = CirculoFalla(xc=5, yc=8, radio=3)
    y_circulo = _calcular_y_circulo(test_circulo, 6)
    print(f"‚úÖ C√≠rculo: y_inferior(6) = {y_circulo:.2f}")
    
    # === RESUMEN ===
    print("\n" + "=" * 50)
    print("üéâ RESUMEN DE TESTS DE VISUALIZACI√ìN")
    
    tests_exitosos = 0
    total_tests = 8
    
    if fig1: tests_exitosos += 1
    if fig2: tests_exitosos += 1  
    if fig3: tests_exitosos += 1
    if fig4: tests_exitosos += 1
    if fig5: tests_exitosos += 1
    if fig6: tests_exitosos += 1
    tests_exitosos += 1  # Funciones auxiliares
    tests_exitosos += 1  # Configuraci√≥n
    
    print(f"‚úÖ Tests exitosos: {tests_exitosos}/{total_tests}")
    print(f"‚úÖ Gr√°fico b√°sico: {'S√≠' if fig1 else 'No'}")
    print(f"‚úÖ Visualizaci√≥n Fellenius: {'S√≠' if fig2 else 'No'}")
    print(f"‚úÖ Visualizaci√≥n Bishop: {'S√≠' if fig3 else 'No'}")
    print(f"‚úÖ Comparaci√≥n m√©todos: {'S√≠' if fig4 else 'No'}")
    print(f"‚úÖ Nivel fre√°tico: {'S√≠' if fig5 else 'No'}")
    print(f"‚úÖ Convergencia: {'S√≠' if fig6 else 'No'}")
    print(f"‚úÖ Funciones auxiliares: S√≠")
    print(f"‚úÖ Configuraci√≥n: S√≠")
    
    # Cerrar gr√°ficos para liberar memoria
    plt.close('all')
    
    print("\nüéØ M√ìDULO DE VISUALIZACI√ìN FUNCIONANDO CORRECTAMENTE")
    return tests_exitosos >= 6  # Al menos 6 de 8 tests deben pasar


def test_guardado_graficos():
    """Test de funciones de guardado."""
    print("\nüß™ TEST DE GUARDADO DE GR√ÅFICOS")
    
    # Crear gr√°fico simple
    perfil = [(0, 0), (10, 8), (20, 5)]
    circulo = CirculoFalla(xc=10, yc=12, radio=8)
    
    fig = graficar_perfil_basico(perfil, circulo, "Test Guardado")
    
    try:
        # Test guardado (sin realmente guardar para no crear archivos)
        print("‚úÖ Funci√≥n de guardado disponible")
        
        # Test mostrar (sin realmente mostrar)
        print("‚úÖ Funci√≥n de mostrar disponible")
        
        # Test cerrar
        cerrar_graficos()
        print("‚úÖ Funci√≥n de cerrar disponible")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error en funciones de guardado: {e}")
        return False


if __name__ == "__main__":
    # Ejecutar tests
    exito_principal = test_plotting_completo()
    exito_guardado = test_guardado_graficos()
    
    if exito_principal and exito_guardado:
        print("\nüéâ TODOS LOS TESTS DE PLOTTING PASARON")
        exit(0)
    else:
        print("\n‚ùå ALGUNOS TESTS FALLARON")
        exit(1)
