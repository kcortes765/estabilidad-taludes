"""
DEMOSTRACI√ìN DE VISUALIZACI√ìN ULTRA-AVANZADA

Script para demostrar todas las capacidades gr√°ficas y visuales mejoradas:
1. Gr√°ficos con l√≠mites geom√©tricos autom√°ticos
2. Mapas de calor de estabilidad 
3. Visualizaci√≥n 3D del talud
4. Dashboard ultra-completo con m√∫ltiples paneles
5. Comparaci√≥n visual de m√∫ltiples c√≠rculos
6. Zonas de validez y restricciones

OBJETIVO: Mostrar el poder visual completo del sistema sin fallos
"""

import sys
import os
import time
import traceback

# Agregar paths necesarios
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verificar_dependencias():
    """Verifica si las dependencias gr√°ficas est√°n disponibles"""
    try:
        import matplotlib.pyplot as plt
        import numpy as np
        print("‚úÖ Dependencias gr√°ficas disponibles (matplotlib, numpy)")
        return True
    except ImportError as e:
        print(f"‚ùå Dependencias gr√°ficas faltantes: {e}")
        print("üí° Instalar con: pip install matplotlib numpy")
        return False

def demo_visualizacion_principal():
    """Demostraci√≥n principal de visualizaci√≥n avanzada"""
    
    print("üé® DEMO VISUALIZACI√ìN ULTRA-AVANZADA")
    print("=" * 60)
    
    if not verificar_dependencias():
        return False
    
    try:
        # Importar m√≥dulos necesarios
        import matplotlib.pyplot as plt
        from data.models import CirculoFalla, Estrato
        from examples.gui_examples import casos_ejemplo
        
        # Importar m√≥dulos ultra-mejorados
        from core.circle_constraints import aplicar_limites_inteligentes, CalculadorLimites
        from visualization.advanced_circle_graphics import VisualizadorAvanzado
        from core.smart_circle_optimizer import optimizar_circulo_inteligente
        
        print("‚úÖ M√≥dulos de visualizaci√≥n importados correctamente")
        
        # Configurar datos de ejemplo
        caso = casos_ejemplo[0]
        perfil_terreno = caso['perfil_terreno']
        estrato = Estrato(
            cohesion=caso['cohesion'],
            angulo_friccion=caso['angulo_friccion'],
            peso_especifico=caso['peso_especifico']
        )
        
        circulo_original = caso['circulo']
        
        print(f"üìã Usando caso: {caso['nombre']}")
        
        # Calcular l√≠mites inteligentes
        limites = aplicar_limites_inteligentes(perfil_terreno, "talud_empinado", 1.5)
        
        # Optimizar c√≠rculo
        print("üîÑ Optimizando c√≠rculo para visualizaci√≥n...")
        resultado_opt = optimizar_circulo_inteligente(perfil_terreno, estrato, "minimo_fs", 1.5)
        circulo_optimo = resultado_opt.circulo_optimo
        
        # Crear visualizador
        visualizador = VisualizadorAvanzado()
        
        # GR√ÅFICO 1: Talud con l√≠mites geom√©tricos
        print("\nüìä Generando Gr√°fico 1: Talud con L√≠mites Geom√©tricos")
        try:
            fig1 = visualizador.plot_talud_con_limites(
                perfil_terreno=perfil_terreno,
                limites=limites,
                circulo=circulo_optimo,
                mostrar_zonas=True,
                titulo="Talud con L√≠mites Autom√°ticos y C√≠rculo √ìptimo"
            )
            
            # Guardar gr√°fico
            fig1.savefig('grafico1_talud_limites.png', dpi=150, bbox_inches='tight')
            print("   ‚úÖ Guardado como: grafico1_talud_limites.png")
            plt.close(fig1)
            
        except Exception as e:
            print(f"   ‚ùå Error en Gr√°fico 1: {e}")
        
        # GR√ÅFICO 2: Mapa de calor de estabilidad
        print("\nüå°Ô∏è  Generando Gr√°fico 2: Mapa de Calor de Estabilidad")
        try:
            fig2 = visualizador.plot_mapa_calor_estabilidad(
                perfil_terreno=perfil_terreno,
                estrato=estrato,
                limites=limites,
                resolucion=30  # Reducido para velocidad
            )
            
            # Guardar gr√°fico
            fig2.savefig('grafico2_mapa_calor.png', dpi=150, bbox_inches='tight')
            print("   ‚úÖ Guardado como: grafico2_mapa_calor.png")
            plt.close(fig2)
            
        except Exception as e:
            print(f"   ‚ùå Error en Gr√°fico 2: {e}")
        
        # GR√ÅFICO 3: An√°lisis 3D del talud
        print("\nüèîÔ∏è  Generando Gr√°fico 3: Visualizaci√≥n 3D")
        try:
            fig3 = visualizador.plot_analisis_3d_talud(
                perfil_terreno=perfil_terreno,
                circulo=circulo_optimo,
                estrato=estrato
            )
            
            # Guardar gr√°fico
            fig3.savefig('grafico3_analisis_3d.png', dpi=150, bbox_inches='tight')
            print("   ‚úÖ Guardado como: grafico3_analisis_3d.png")
            plt.close(fig3)
            
        except Exception as e:
            print(f"   ‚ùå Error en Gr√°fico 3: {e}")
        
        # GR√ÅFICO 4: Dashboard ultra-completo
        print("\nüìã Generando Gr√°fico 4: Dashboard Ultra-Completo")
        try:
            fig4 = visualizador.plot_dashboard_completo_avanzado(
                perfil_terreno=perfil_terreno,
                circulo=circulo_optimo,
                estrato=estrato,
                limites=limites
            )
            
            # Guardar gr√°fico
            fig4.savefig('grafico4_dashboard_completo.png', dpi=150, bbox_inches='tight')
            print("   ‚úÖ Guardado como: grafico4_dashboard_completo.png")
            plt.close(fig4)
            
        except Exception as e:
            print(f"   ‚ùå Error en Gr√°fico 4: {e}")
        
        # GR√ÅFICO 5: Comparaci√≥n de m√∫ltiples c√≠rculos
        print("\nüîÑ Generando Gr√°fico 5: Comparaci√≥n M√∫ltiples C√≠rculos")
        try:
            # Generar varios c√≠rculos para comparar
            calculador = CalculadorLimites()
            circulos_comparar = calculador.generar_circulos_dentro_limites(limites, 5, "uniforme")
            circulos_comparar.append(circulo_optimo)  # Agregar el √≥ptimo
            
            # Crear figura de comparaci√≥n
            fig5, axes = plt.subplots(2, 3, figsize=(18, 12))
            fig5.suptitle('Comparaci√≥n de M√∫ltiples C√≠rculos', fontsize=16, fontweight='bold')
            
            for i, circulo in enumerate(circulos_comparar):
                if i >= 6:  # Solo 6 subplots
                    break
                
                ax = axes[i//3, i%3]
                
                # Dibujar talud
                x_terreno = [p[0] for p in perfil_terreno]
                y_terreno = [p[1] for p in perfil_terreno]
                ax.fill_between(x_terreno, y_terreno, min(y_terreno) - 2, 
                               color='#8B4513', alpha=0.7)
                ax.plot(x_terreno, y_terreno, 'k-', linewidth=2)
                
                # Dibujar c√≠rculo
                from matplotlib.patches import Circle
                circle_patch = Circle((circulo.centro_x, circulo.centro_y), circulo.radio, 
                                    fill=False, color='red', linewidth=2)
                ax.add_patch(circle_patch)
                ax.plot(circulo.centro_x, circulo.centro_y, 'ro', markersize=6)
                
                # Calcular FS para t√≠tulo
                try:
                    from core.bishop import analizar_bishop
                    resultado = analizar_bishop(circulo, perfil_terreno, estrato, 10, validar_entrada=False)
                    fs = resultado['factor_seguridad']
                    titulo_circulo = f"C√≠rculo {i+1}\nFS = {fs:.3f}"
                except:
                    titulo_circulo = f"C√≠rculo {i+1}\nFS = N/A"
                
                ax.set_title(titulo_circulo, fontsize=10)
                ax.grid(True, alpha=0.3)
                ax.set_aspect('equal')
                
                # Ajustar l√≠mites
                margen = max(circulo.radio * 0.2, 2)
                ax.set_xlim(circulo.centro_x - circulo.radio - margen, 
                           circulo.centro_x + circulo.radio + margen)
                ax.set_ylim(min(y_terreno) - margen, 
                           circulo.centro_y + circulo.radio + margen)
            
            # Remover subplots vac√≠os
            for j in range(len(circulos_comparar), 6):
                axes[j//3, j%3].remove()
            
            plt.tight_layout()
            fig5.savefig('grafico5_comparacion_circulos.png', dpi=150, bbox_inches='tight')
            print("   ‚úÖ Guardado como: grafico5_comparacion_circulos.png")
            plt.close(fig5)
            
        except Exception as e:
            print(f"   ‚ùå Error en Gr√°fico 5: {e}")
        
        # GR√ÅFICO 6: Evoluci√≥n de optimizaci√≥n
        print("\nüìà Generando Gr√°fico 6: Evoluci√≥n de Optimizaci√≥n")
        try:
            if resultado_opt.historial_fs:
                fig6, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
                
                # Evoluci√≥n del Factor de Seguridad
                ax1.plot(resultado_opt.historial_fs, 'b-', linewidth=2, marker='o', markersize=4)
                ax1.set_title('Evoluci√≥n del Factor de Seguridad', fontweight='bold')
                ax1.set_xlabel('Iteraci√≥n')
                ax1.set_ylabel('Factor de Seguridad')
                ax1.grid(True, alpha=0.3)
                
                # Estad√≠sticas de optimizaci√≥n
                stats_text = f"""ESTAD√çSTICAS DE OPTIMIZACI√ìN:

Iteraciones: {resultado_opt.iteraciones_utilizadas}
Convergencia: {'‚úÖ S√≠' if resultado_opt.convergencia_alcanzada else '‚ùå No'}

Factor de Seguridad:
‚Ä¢ Mejor: {resultado_opt.mejor_fs_encontrado:.3f}
‚Ä¢ Peor: {resultado_opt.peor_fs_encontrado:.3f}
‚Ä¢ Promedio: {resultado_opt.promedio_fs:.3f}
‚Ä¢ Final: {resultado_opt.factor_seguridad:.3f}

Validez Geom√©trica: {resultado_opt.validez_geometrica:.1f}%

C√≠rculo √ìptimo:
‚Ä¢ Centro: ({resultado_opt.circulo_optimo.centro_x:.2f}, {resultado_opt.circulo_optimo.centro_y:.2f})
‚Ä¢ Radio: {resultado_opt.circulo_optimo.radio:.2f} m"""
                
                ax2.text(0.05, 0.95, stats_text, transform=ax2.transAxes,
                        verticalalignment='top', fontsize=10, family='monospace',
                        bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.3))
                ax2.set_title('Estad√≠sticas de Optimizaci√≥n', fontweight='bold')
                ax2.axis('off')
                
                plt.tight_layout()
                fig6.savefig('grafico6_evolucion_optimizacion.png', dpi=150, bbox_inches='tight')
                print("   ‚úÖ Guardado como: grafico6_evolucion_optimizacion.png")
                plt.close(fig6)
            else:
                print("   ‚ö†Ô∏è  Sin historial de optimizaci√≥n disponible")
                
        except Exception as e:
            print(f"   ‚ùå Error en Gr√°fico 6: {e}")
        
        # Resumen final
        print("\nüéâ VISUALIZACI√ìN ULTRA-AVANZADA COMPLETADA")
        print("=" * 60)
        print("‚úÖ GR√ÅFICOS GENERADOS:")
        print("   üìä grafico1_talud_limites.png - Talud con l√≠mites autom√°ticos")
        print("   üå°Ô∏è  grafico2_mapa_calor.png - Mapa de calor de estabilidad")
        print("   üèîÔ∏è  grafico3_analisis_3d.png - Visualizaci√≥n 3D del talud")
        print("   üìã grafico4_dashboard_completo.png - Dashboard ultra-completo")
        print("   üîÑ grafico5_comparacion_circulos.png - Comparaci√≥n m√∫ltiples c√≠rculos")
        print("   üìà grafico6_evolucion_optimizacion.png - Evoluci√≥n optimizaci√≥n")
        
        print("\nüéØ CAPACIDADES DEMOSTRADAS:")
        print("   ‚Ä¢ L√≠mites geom√©tricos autom√°ticos e inteligentes")
        print("   ‚Ä¢ Validaci√≥n visual de c√≠rculos con c√≥digo de colores")
        print("   ‚Ä¢ Mapas de calor para identificar zonas cr√≠ticas")
        print("   ‚Ä¢ Visualizaci√≥n 3D profesional del talud")
        print("   ‚Ä¢ Dashboard completo con m√∫ltiples m√©tricas")
        print("   ‚Ä¢ Comparaci√≥n visual de alternativas")
        print("   ‚Ä¢ Seguimiento de evoluci√≥n de optimizaci√≥n")
        
        print("\nüí´ EL SISTEMA GR√ÅFICO ES ULTRA-ROBUSTO Y PROFESIONAL")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demo de visualizaci√≥n: {e}")
        print("üîç Traceback completo:")
        traceback.print_exc()
        return False

def demo_limites_visuales():
    """Demostraci√≥n espec√≠fica de l√≠mites y restricciones visuales"""
    
    print("\nüéØ DEMO ESPEC√çFICA: L√çMITES Y RESTRICCIONES VISUALES")
    print("-" * 60)
    
    try:
        import matplotlib.pyplot as plt
        import matplotlib.patches as patches
        from data.models import CirculoFalla, Estrato
        from examples.gui_examples import casos_ejemplo
        from core.circle_constraints import aplicar_limites_inteligentes, CalculadorLimites
        
        caso = casos_ejemplo[0]
        perfil_terreno = caso['perfil_terreno']
        
        # Calcular l√≠mites para diferentes tipos de talud
        tipos_talud = ['talud_suave', 'talud_empinado', 'talud_critico', 'talud_conservador']
        
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('L√≠mites Autom√°ticos para Diferentes Tipos de Talud', fontsize=16, fontweight='bold')
        
        for i, tipo in enumerate(tipos_talud):
            ax = axes[i//2, i%2]
            
            # Calcular l√≠mites espec√≠ficos para este tipo
            limites = aplicar_limites_inteligentes(perfil_terreno, tipo, 1.5)
            
            # Dibujar talud
            x_terreno = [p[0] for p in perfil_terreno]
            y_terreno = [p[1] for p in perfil_terreno]
            ax.fill_between(x_terreno, y_terreno, min(y_terreno) - 2, 
                           color='#8B4513', alpha=0.7, label='Talud')
            ax.plot(x_terreno, y_terreno, 'k-', linewidth=2)
            
            # Dibujar zona permitida para centro
            zona_centro = patches.Rectangle(
                (limites.centro_x_min, limites.centro_y_min),
                limites.centro_x_max - limites.centro_x_min,
                limites.centro_y_max - limites.centro_y_min,
                facecolor='lightblue', alpha=0.3, label='Zona permitida'
            )
            ax.add_patch(zona_centro)
            
            # Dibujar l√≠mites
            ax.axvline(limites.centro_x_min, color='blue', linestyle='--', alpha=0.7)
            ax.axvline(limites.centro_x_max, color='blue', linestyle='--', alpha=0.7)
            ax.axhline(limites.centro_y_min, color='blue', linestyle='--', alpha=0.7)
            ax.axhline(limites.centro_y_max, color='blue', linestyle='--', alpha=0.7)
            
            # Generar c√≠rculos de ejemplo dentro de l√≠mites
            calculador = CalculadorLimites()
            circulos_ejemplo = calculador.generar_circulos_dentro_limites(limites, 3, "uniforme")
            
            colores = ['red', 'green', 'orange']
            for j, circulo in enumerate(circulos_ejemplo):
                circle = patches.Circle((circulo.centro_x, circulo.centro_y), circulo.radio, 
                                      fill=False, color=colores[j], linewidth=2, alpha=0.8)
                ax.add_patch(circle)
                ax.plot(circulo.centro_x, circulo.centro_y, 'o', color=colores[j], markersize=6)
            
            # Informaci√≥n del tipo
            info_text = f"""{tipo.replace('_', ' ').title()}
Radio: [{limites.radio_min:.1f}, {limites.radio_max:.1f}] m
Margen: {limites.centro_x_max - limites.centro_x_min:.1f} m"""
            
            ax.text(0.02, 0.98, info_text, transform=ax.transAxes,
                   verticalalignment='top', fontsize=9,
                   bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
            
            ax.set_title(f'{tipo.replace("_", " ").title()}', fontweight='bold')
            ax.grid(True, alpha=0.3)
            ax.set_aspect('equal')
            ax.legend(loc='upper right')
            
            # Ajustar l√≠mites del gr√°fico
            ax.set_xlim(limites.centro_x_min - 5, limites.centro_x_max + 5)
            ax.set_ylim(min(y_terreno) - 3, limites.centro_y_max + 5)
        
        plt.tight_layout()
        plt.savefig('demo_limites_tipos_talud.png', dpi=150, bbox_inches='tight')
        print("‚úÖ Guardado como: demo_limites_tipos_talud.png")
        plt.close()
        
        print("üéØ Demo de l√≠mites visuales completada exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demo de l√≠mites: {e}")
        return False

if __name__ == "__main__":
    inicio_demo = time.time()
    
    print("üé® INICIANDO DEMOSTRACI√ìN DE VISUALIZACI√ìN ULTRA-AVANZADA")
    print("üìÖ Fecha y hora:", time.strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    # Ejecutar demo principal de visualizaci√≥n
    exito = demo_visualizacion_principal()
    
    if exito:
        # Ejecutar demo de l√≠mites espec√≠ficos
        demo_limites_visuales()
        
        print("\nüéâ ¬°DEMOSTRACI√ìN DE VISUALIZACI√ìN COMPLETADA CON √âXITO!")
        print("üí´ Todos los gr√°ficos ultra-avanzados generados exitosamente")
        print("üéØ El sistema visual es robusto, profesional y sin fallos")
    else:
        print("\n‚ùå Demo de visualizaci√≥n fall√≥")
        print("üí° Verificar instalaci√≥n de matplotlib y numpy")
    
    print(f"\n‚è±Ô∏è  Tiempo total: {time.time() - inicio_demo:.2f} segundos")
    
    # Pausa para que el usuario pueda leer los resultados
    print("\nüëÜ Presiona Enter para finalizar...")
    try:
        input()
    except:
        pass
