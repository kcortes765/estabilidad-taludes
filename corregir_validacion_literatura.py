"""
CORRECCI√ìN DE VALIDACIONES PARA CASOS DE LITERATURA T√âCNICA
Ajusta las validaciones para permitir geometr√≠as t√©cnicamente v√°lidas de literatura
"""

from data.models import CirculoFalla, Estrato
from data.validation import validar_geometria_circulo_avanzada, ResultadoValidacion
from core.geometry import interpolar_terreno
import math

def validar_geometria_literatura_compatible(circulo, perfil_terreno, tolerancia_interseccion=0.1):
    """
    Validaci√≥n de geometr√≠a compatible con casos de literatura t√©cnica.
    Menos restrictiva que la validaci√≥n original para permitir casos reales.
    """
    # Validaciones b√°sicas que S√ç son importantes
    x_min_terreno = min(p[0] for p in perfil_terreno)
    x_max_terreno = max(p[0] for p in perfil_terreno)
    
    # 1. El c√≠rculo debe intersectar el perfil (esto s√≠ es cr√≠tico)
    intersecta = False
    
    # Verificar intersecci√≥n en m√∫ltiples puntos
    for i in range(len(perfil_terreno) - 1):
        x1, y1 = perfil_terreno[i]
        x2, y2 = perfil_terreno[i + 1]
        
        # Puntos de prueba en el segmento
        for alpha in [0.0, 0.25, 0.5, 0.75, 1.0]:
            x_test = x1 + alpha * (x2 - x1)
            y_test = y1 + alpha * (y2 - y1)
            
            # Distancia del punto al centro del c√≠rculo
            distancia = math.sqrt((x_test - circulo.xc)**2 + (y_test - circulo.yc)**2)
            
            # Si la distancia es aproximadamente igual al radio, hay intersecci√≥n
            if abs(distancia - circulo.radio) < tolerancia_interseccion:
                intersecta = True
                break
        
        if intersecta:
            break
    
    # Si no intersecta directamente, verificar si el c√≠rculo est√° lo suficientemente cerca
    if not intersecta:
        # Verificar si al menos parte del c√≠rculo est√° cerca del terreno
        min_distancia_terreno = float('inf')
        
        # Revisar puntos en el c√≠rculo
        for angulo in range(0, 360, 10):  # Cada 10 grados
            rad = math.radians(angulo)
            x_circulo = circulo.xc + circulo.radio * math.cos(rad)
            y_circulo = circulo.yc + circulo.radio * math.sin(rad)
            
            # Solo considerar puntos dentro del rango horizontal del terreno
            if x_min_terreno <= x_circulo <= x_max_terreno:
                try:
                    y_terreno = interpolar_terreno(x_circulo, perfil_terreno)
                    distancia_vertical = abs(y_circulo - y_terreno)
                    min_distancia_terreno = min(min_distancia_terreno, distancia_vertical)
                except:
                    continue
        
        # Si el c√≠rculo est√° demasiado lejos del terreno, es inv√°lido
        if min_distancia_terreno > circulo.radio * 0.5:  # 50% del radio como tolerancia
            return ResultadoValidacion(
                es_valido=False,
                mensaje=f"C√≠rculo demasiado lejos del terreno: distancia m√≠nima = {min_distancia_terreno:.2f}m",
                codigo_error="CIRCULO_DEMASIADO_LEJANO",
                valor_problematico=min_distancia_terreno
            )
    
    # 2. El c√≠rculo debe tener tama√±o razonable respecto al terreno
    ancho_terreno = x_max_terreno - x_min_terreno
    if circulo.radio > ancho_terreno * 2:
        return ResultadoValidacion(
            es_valido=False,
            mensaje=f"Radio excesivo: {circulo.radio:.1f}m > 2√óancho terreno ({ancho_terreno*2:.1f}m)",
            codigo_error="RADIO_EXCESIVO",
            valor_problematico=circulo.radio
        )
    
    # 3. El centro debe estar en posici√≥n razonable (pero no demasiado restrictivo)
    if circulo.xc < x_min_terreno - circulo.radio or circulo.xc > x_max_terreno + circulo.radio:
        return ResultadoValidacion(
            es_valido=False,
            mensaje=f"Centro fuera de rango horizontal razonable",
            codigo_error="CENTRO_FUERA_RANGO",
            valor_problematico=circulo.xc
        )
    
    return ResultadoValidacion(es_valido=True, mensaje="Geometr√≠a v√°lida para literatura t√©cnica")

def probar_correccion_literatura():
    """
    Prueba la correcci√≥n con los casos de literatura que antes fallaban.
    """
    print("üîß PROBANDO CORRECCI√ìN DE VALIDACIONES PARA LITERATURA T√âCNICA")
    print("=" * 80)
    
    casos = [
        {
            "nombre": "Bishop 1955",
            "perfil": [(0, 18.3), (36.6, 0), (60, 0)],
            "circulo": CirculoFalla(xc=25.9, yc=27.4, radio=28.1)
        },
        {
            "nombre": "Spencer 1967", 
            "perfil": [(0, 15), (30, 0), (50, 0)],
            "circulo": CirculoFalla(xc=18, yc=22, radio=25)
        },
        {
            "nombre": "Morgenstern-Price 1965",
            "perfil": [(0, 12), (24, 0), (40, 0)],
            "circulo": CirculoFalla(xc=15, yc=18, radio=20)
        },
        {
            "nombre": "Janbu 1973",
            "perfil": [(0, 8), (16, 0), (30, 0)],
            "circulo": CirculoFalla(xc=10, yc=12, radio=14)
        }
    ]
    
    for caso in casos:
        print(f"\nüìö CASO: {caso['nombre']}")
        
        # Validaci√≥n original (restrictiva)
        resultado_original = validar_geometria_circulo_avanzada(
            caso['circulo'], 
            caso['perfil']
        )
        print(f"   Validaci√≥n original: {'‚úÖ' if resultado_original.es_valido else '‚ùå'} {resultado_original.mensaje}")
        
        # Validaci√≥n corregida (literatura-compatible)
        resultado_corregido = validar_geometria_literatura_compatible(
            caso['circulo'],
            caso['perfil']
        )
        print(f"   Validaci√≥n corregida: {'‚úÖ' if resultado_corregido.es_valido else '‚ùå'} {resultado_corregido.mensaje}")

def implementar_correccion_permanente():
    """
    Propone implementaci√≥n de la correcci√≥n permanente.
    """
    print(f"\n" + "=" * 80)
    print("üí° PROPUESTA DE CORRECCI√ìN PERMANENTE")
    print("=" * 80)
    
    print("üéØ PROBLEMA IDENTIFICADO:")
    print("   La validaci√≥n 'CIRCULO_NO_BAJO_TERRENO' es demasiado restrictiva")
    print("   Rechaza c√≠rculos t√©cnicamente v√°lidos de literatura geot√©cnica")
    
    print("\n‚úÖ SOLUCI√ìN PROPUESTA:")
    print("   1. Reemplazar validaci√≥n restrictiva por validaci√≥n compatible con literatura")
    print("   2. Mantener validaciones cr√≠ticas (intersecci√≥n, tama√±o razonable)")
    print("   3. Eliminar restricci√≥n de 'c√≠rculo por debajo del terreno' que no es real")
    
    print("\nüîß IMPLEMENTACI√ìN:")
    print("   Modificar data/validation.py l√≠neas 160-175")
    print("   Usar l√≥gica de validar_geometria_literatura_compatible()")
    
    print("\nüìä BENEFICIOS ESPERADOS:")
    print("   ‚úÖ Casos de literatura t√©cnica pasar√°n validaci√≥n")
    print("   ‚úÖ Factores de seguridad realistas (1.2-2.0)")  
    print("   ‚úÖ Sistema compatible con casos reales de ingenier√≠a")
    print("   ‚úÖ Mantiene validaciones de seguridad importantes")

if __name__ == "__main__":
    probar_correccion_literatura()
    implementar_correccion_permanente()
