#!/usr/bin/env python3
"""
Diagn√≥stico preciso de los errores en la GUI de an√°lisis de estabilidad.
"""

import sys
import traceback
from gui_examples import get_caso_ejemplo, get_nombres_casos
from gui_analysis import analizar_desde_gui

def diagnosticar_caso_especifico(nombre_caso):
    """Diagnosticar un caso espec√≠fico paso a paso."""
    print(f"\n{'='*60}")
    print(f"DIAGN√ìSTICO: {nombre_caso}")
    print(f"{'='*60}")
    
    try:
        # 1. Obtener par√°metros
        print("1. Obteniendo par√°metros del caso...")
        caso = get_caso_ejemplo(nombre_caso)
        
        print("   Par√°metros:")
        for key, value in caso.items():
            if key != 'descripcion':
                print(f"     {key}: {value}")
        
        # 2. Intentar an√°lisis con wrapper GUI
        print("\n2. Ejecutando an√°lisis con wrapper GUI...")
        resultado = analizar_desde_gui(caso)
        
        # 3. Verificar resultado
        if resultado['valido']:
            print("   ‚úÖ AN√ÅLISIS EXITOSO")
            print(f"     Bishop FS: {resultado['bishop'].factor_seguridad:.3f}")
            print(f"     Fellenius FS: {resultado['fellenius'].factor_seguridad:.3f}")
            return True
        else:
            print("   ‚ùå AN√ÅLISIS FALL√ì")
            print(f"     Error: {resultado.get('error', 'Error desconocido')}")
            
            # Mostrar detalles del error si est√°n disponibles
            if 'detalles' in resultado:
                print(f"     Detalles: {resultado['detalles']}")
            
            return False
            
    except Exception as e:
        print(f"   ‚ùå ERROR CR√çTICO: {str(e)}")
        print("   Traceback completo:")
        traceback.print_exc()
        return False

def analizar_error_suma_fuerzas():
    """Analizar espec√≠ficamente el error de suma de fuerzas."""
    print(f"\n{'='*60}")
    print("AN√ÅLISIS DEL ERROR: Suma de fuerzas actuantes ‚â§ 0")
    print(f"{'='*60}")
    
    print("Este error indica que:")
    print("1. El c√≠rculo de falla no intersecta correctamente el terreno")
    print("2. Las dovelas no tienen peso suficiente (geometr√≠a inv√°lida)")
    print("3. El c√≠rculo est√° mal posicionado respecto al talud")
    
    print("\nCausas comunes:")
    print("- Centro del c√≠rculo muy alto o muy bajo")
    print("- Radio muy peque√±o o muy grande")
    print("- C√≠rculo fuera del rango del perfil del terreno")
    print("- √Ångulo del talud muy empinado para el c√≠rculo dado")

def proponer_correcciones():
    """Proponer correcciones para los casos problem√°ticos."""
    print(f"\n{'='*60}")
    print("PROPUESTAS DE CORRECCI√ìN")
    print(f"{'='*60}")
    
    # Caso problem√°tico identificado: Talud Marginal - Arcilla Blanda
    caso_original = get_caso_ejemplo("Talud Marginal - Arcilla Blanda")
    
    print("Caso problem√°tico: Talud Marginal - Arcilla Blanda")
    print("Par√°metros actuales:")
    print(f"  Altura: {caso_original['altura']} m")
    print(f"  √Ångulo: {caso_original['angulo_talud']}¬∞")
    print(f"  Centro: ({caso_original['centro_x']}, {caso_original['centro_y']})")
    print(f"  Radio: {caso_original['radio']} m")
    
    # Calcular correcciones basadas en la geometr√≠a del talud
    altura = caso_original['altura']
    angulo = caso_original['angulo_talud']
    
    # Nuevos par√°metros m√°s conservadores
    nuevo_centro_x = altura * 0.8  # M√°s cerca del pie del talud
    nuevo_centro_y = altura * 1.6  # M√°s bajo que el original
    nuevo_radio = altura * 1.8     # Radio m√°s conservador
    
    print("\nPar√°metros corregidos propuestos:")
    print(f"  Centro: ({nuevo_centro_x:.1f}, {nuevo_centro_y:.1f})")
    print(f"  Radio: {nuevo_radio:.1f} m")
    
    return {
        'centro_x': nuevo_centro_x,
        'centro_y': nuevo_centro_y,
        'radio': nuevo_radio
    }

def main():
    """Funci√≥n principal de diagn√≥stico."""
    print("DIAGN√ìSTICO PRECISO DE ERRORES EN GUI")
    print("An√°lisis de Estabilidad de Taludes")
    print(f"{'='*60}")
    
    # 1. Diagnosticar todos los casos
    nombres_casos = get_nombres_casos()
    casos_exitosos = []
    casos_fallidos = []
    
    for nombre in nombres_casos:
        if diagnosticar_caso_especifico(nombre):
            casos_exitosos.append(nombre)
        else:
            casos_fallidos.append(nombre)
    
    # 2. Resumen de resultados
    print(f"\n{'='*60}")
    print("RESUMEN DE RESULTADOS")
    print(f"{'='*60}")
    
    print(f"Casos exitosos ({len(casos_exitosos)}):")
    for caso in casos_exitosos:
        print(f"  ‚úÖ {caso}")
    
    print(f"\nCasos fallidos ({len(casos_fallidos)}):")
    for caso in casos_fallidos:
        print(f"  ‚ùå {caso}")
    
    # 3. An√°lisis del error principal
    if casos_fallidos:
        analizar_error_suma_fuerzas()
        
        # 4. Proponer correcciones
        correcciones = proponer_correcciones()
        
        print(f"\n{'='*60}")
        print("ACCI√ìN REQUERIDA")
        print(f"{'='*60}")
        print("1. Corregir par√°metros en gui_examples.py")
        print("2. Actualizar casos problem√°ticos con nuevos par√°metros")
        print("3. Verificar que todos los casos pasen el diagn√≥stico")
        print("4. Probar la GUI nuevamente")
        
        return False
    else:
        print(f"\nüéâ TODOS LOS CASOS FUNCIONAN CORRECTAMENTE")
        print("La GUI deber√≠a funcionar sin errores.")
        return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nError inesperado en diagn√≥stico: {e}")
        traceback.print_exc()
        sys.exit(1)
