"""
DEMOSTRACI√ìN COMPLETA DEL SISTEMA AVANZADO DE C√çRCULOS

Este script muestra todas las capacidades mejoradas del sistema:
1. Geometr√≠a avanzada de c√≠rculos
2. Visualizaci√≥n diagn√≥stica completa  
3. Optimizaci√≥n inteligente de c√≠rculos
4. Herramientas de diagn√≥stico y correcci√≥n

¬°Todo el sistema de c√≠rculos completamente mejorado!
"""

import sys
import time
import matplotlib.pyplot as plt
from gui_examples import CASOS_EJEMPLO
from data.models import CirculoFalla, Estrato

# Importar todos los m√≥dulos mejorados
from core.circle_geometry import GeometriaCirculoAvanzada, generar_circulos_candidatos
from core.circle_optimizer import (OptimizadorCirculos, ParametrosOptimizacion, 
                                   TipoOptimizacion, MetodoOptimizacion, crear_optimizador_casos_ejemplo)
from visualization.circle_plots import VisualizadorCirculos
from tools.circle_diagnostics import diagnosticar_caso_completo, test_sistema_completo


def demo_geometria_avanzada():
    """Demostraci√≥n de capacidades geom√©tricas avanzadas"""
    print(f"\n{'='*70}")
    print(f"üîß DEMO: GEOMETR√çA AVANZADA DE C√çRCULOS")
    print(f"{'='*70}")
    
    # Usar caso ejemplo
    caso = CASOS_EJEMPLO["Talud Moderado - Arena Densa"]
    circulo = CirculoFalla(caso['centro_x'], caso['centro_y'], caso['radio'])
    estrato = Estrato(caso['cohesion'], caso['phi_grados'], caso['gamma'])
    
    geom = GeometriaCirculoAvanzada()
    
    # 1. Intersecciones con terreno
    print("\nüìç Calculando intersecciones con terreno...")
    intersecciones = geom.calcular_intersecciones_terreno(circulo, caso['perfil_terreno'])
    print(f"   Intersecciones encontradas: {len(intersecciones)}")
    for i, (x, y) in enumerate(intersecciones):
        print(f"   {i+1}. ({x:.2f}, {y:.2f})")
    
    # 2. Validaciones completas
    print("\n‚úÖ Ejecutando validaciones completas...")
    validaciones = geom.validar_circulo_completo(circulo, caso['perfil_terreno'], estrato, 10)
    for validacion in validaciones:
        status = "‚úÖ" if validacion.es_valido else "‚ùå"
        print(f"   {status} {validacion.tipo.value}: {validacion.mensaje}")
    
    # 3. M√©tricas avanzadas
    print("\nüìä Calculando m√©tricas avanzadas...")
    metricas = geom.calcular_metricas_circulo(circulo, caso['perfil_terreno'], estrato, 15)
    print(f"   üéØ Dovelas totales: {metricas.num_dovelas_total}")
    print(f"   ‚úÖ Dovelas v√°lidas: {metricas.num_dovelas_validas}")
    print(f"   üìè Longitud arco: {metricas.longitud_arco:.2f} m")
    print(f"   üåä Cobertura terreno: {metricas.cobertura_terreno:.1f}%")
    print(f"   ‚öñÔ∏è  Suma fuerzas: {metricas.suma_fuerzas_actuantes:.1f} N")
    
    return circulo, caso


def demo_visualizacion_avanzada(circulo, caso):
    """Demostraci√≥n de visualizaci√≥n diagn√≥stica avanzada"""
    print(f"\n{'='*70}")
    print(f"üé® DEMO: VISUALIZACI√ìN DIAGN√ìSTICA AVANZADA")
    print(f"{'='*70}")
    
    viz = VisualizadorCirculos()
    estrato = Estrato(caso['cohesion'], caso['phi_grados'], caso['gamma'])
    
    print("\nüñºÔ∏è  Generando visualizaciones...")
    
    # 1. Gr√°fico diagn√≥stico completo
    print("   üìä Dashboard diagn√≥stico completo...")
    fig1 = viz.plot_diagnostico_completo(circulo, caso['perfil_terreno'], estrato, 12)
    plt.savefig(f"diagnostico_{caso['descripcion'].replace(' ', '_').replace('-', '_')}.png", 
                dpi=150, bbox_inches='tight')
    print(f"   üíæ Guardado: diagnostico_{caso['descripcion'].replace(' ', '_').replace('-', '_')}.png")
    
    # 2. M√∫ltiples c√≠rculos comparativos
    print("   üîÑ Generando c√≠rculos alternativos...")
    circulos_alt = generar_circulos_candidatos(caso['perfil_terreno'], densidad=3)[:4]
    circulos_comp = [circulo] + circulos_alt[:3]
    
    fig2 = viz.plot_comparacion_circulos(circulos_comp, caso['perfil_terreno'], estrato)
    plt.savefig(f"comparacion_{caso['descripcion'].replace(' ', '_').replace('-', '_')}.png", 
                dpi=150, bbox_inches='tight')
    print(f"   üíæ Guardado: comparacion_{caso['descripcion'].replace(' ', '_').replace('-', '_')}.png")
    
    plt.show()
    
    return fig1, fig2


def demo_optimizacion_inteligente():
    """Demostraci√≥n de optimizaci√≥n inteligente de c√≠rculos"""
    print(f"\n{'='*70}")
    print(f"üöÄ DEMO: OPTIMIZACI√ìN INTELIGENTE DE C√çRCULOS")
    print(f"{'='*70}")
    
    # Optimizador
    optimizador = OptimizadorCirculos()
    
    # Probar diferentes casos y estrategias
    casos_prueba = [
        ("Talud Estable - Carretera", TipoOptimizacion.FACTOR_SEGURIDAD_MINIMO, "Buscar c√≠rculo CR√çTICO"),
        ("Talud Marginal - Arcilla Blanda", TipoOptimizacion.FACTOR_SEGURIDAD_OBJETIVO, "FS objetivo 1.5-2.0"),
        ("Talud con Agua - Cr√≠tico", TipoOptimizacion.MULTIOBJETIVO, "Optimizaci√≥n multiobjetivo")
    ]
    
    resultados_optimizacion = {}
    
    for nombre_caso, tipo_opt, descripcion in casos_prueba:
        print(f"\nüîß {descripcion}: {nombre_caso}")
        
        caso = CASOS_EJEMPLO[nombre_caso]
        estrato = Estrato(caso['cohesion'], caso['phi_grados'], caso['gamma'])
        
        # Configurar par√°metros seg√∫n tipo
        if tipo_opt == TipoOptimizacion.FACTOR_SEGURIDAD_MINIMO:
            params = ParametrosOptimizacion(
                tipo=tipo_opt,
                metodo=MetodoOptimizacion.HIBRIDO,
                max_iteraciones=150,
                poblacion_genetico=20,
                verbose=False
            )
        elif tipo_opt == TipoOptimizacion.FACTOR_SEGURIDAD_OBJETIVO:
            params = ParametrosOptimizacion(
                tipo=tipo_opt,
                metodo=MetodoOptimizacion.ALGORITMO_GENETICO,
                fs_objetivo_min=1.5,
                fs_objetivo_max=2.0,
                max_iteraciones=200,
                poblacion_genetico=25,
                verbose=False
            )
        else:  # Multiobjetivo
            params = ParametrosOptimizacion(
                tipo=tipo_opt,
                metodo=MetodoOptimizacion.HIBRIDO,
                peso_fs=0.7,
                peso_validez=0.3,
                max_iteraciones=180,
                poblacion_genetico=22,
                verbose=False
            )
        
        # Ejecutar optimizaci√≥n
        print(f"   ‚è≥ Optimizando... (m√©todo: {params.metodo.value})")
        start_time = time.time()
        
        try:
            resultado = optimizador.optimizar(caso['perfil_terreno'], estrato, params)
            elapsed_time = time.time() - start_time
            
            print(f"   ‚úÖ Completado en {elapsed_time:.2f}s")
            print(f"   üéØ FS √≥ptimo: {resultado.factor_seguridad:.3f}")
            print(f"   üìç Centro √≥ptimo: ({resultado.circulo_optimo.centro_x:.1f}, {resultado.circulo_optimo.centro_y:.1f})")
            print(f"   üìè Radio √≥ptimo: {resultado.circulo_optimo.radio:.1f} m")
            print(f"   üîÑ Iteraciones usadas: {resultado.iteraciones_usadas}")
            print(f"   üìà Mejoras encontradas: {len(resultado.historial_fs)}")
            
            resultados_optimizacion[nombre_caso] = resultado
            
        except Exception as e:
            print(f"   ‚ùå Error en optimizaci√≥n: {str(e)}")
            resultados_optimizacion[nombre_caso] = None
    
    return resultados_optimizacion


def demo_diagnostico_completo():
    """Demostraci√≥n del sistema de diagn√≥stico completo"""
    print(f"\n{'='*70}")
    print(f"üîç DEMO: SISTEMA DE DIAGN√ìSTICO COMPLETO")
    print(f"{'='*70}")
    
    # Test de todos los casos
    print("\nüß™ Ejecutando tests autom√°ticos de todos los casos...")
    resultados_test = test_sistema_completo()
    
    # Diagn√≥stico espec√≠fico de casos problem√°ticos
    print(f"\nüî¨ Diagn√≥stico espec√≠fico de casos individuales...")
    
    casos_diagnostico = ["Talud Estable - Carretera", "Talud con Agua - Cr√≠tico"]
    
    for nombre_caso in casos_diagnostico:
        try:
            print(f"\nüìã Diagn√≥stico detallado: {nombre_caso}")
            metricas = diagnosticar_caso_completo(nombre_caso, mostrar_graficos=False)
            
            print(f"   üìä Resumen de m√©tricas:")
            print(f"      - Geometricamente v√°lido: {metricas.es_geometricamente_valido}")
            print(f"      - Computacionalmente v√°lido: {metricas.es_computacionalmente_valido}")
            print(f"      - Factor de seguridad: {metricas.factor_seguridad}")
            print(f"      - Dovelas v√°lidas: {metricas.porcentaje_dovelas_validas:.1f}%")
            
        except Exception as e:
            print(f"   ‚ùå Error en diagn√≥stico: {str(e)}")
    
    return resultados_test


def demo_completo():
    """Ejecuta demostraci√≥n completa del sistema mejorado"""
    print(f"\n{'#'*80}")
    print(f"üéâ DEMOSTRACI√ìN COMPLETA DEL SISTEMA AVANZADO DE C√çRCULOS")
    print(f"üéâ ¬°TODO MEJORADO Y FUNCIONANDO!")
    print(f"{'#'*80}")
    
    try:
        # 1. Geometr√≠a avanzada
        circulo, caso = demo_geometria_avanzada()
        
        # 2. Visualizaci√≥n avanzada
        fig1, fig2 = demo_visualizacion_avanzada(circulo, caso)
        
        # 3. Optimizaci√≥n inteligente
        resultados_opt = demo_optimizacion_inteligente()
        
        # 4. Diagn√≥stico completo
        resultados_test = demo_diagnostico_completo()
        
        # Resumen final
        print(f"\n{'='*80}")
        print(f"‚ú® DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
        print(f"{'='*80}")
        
        print(f"\nüìã RESUMEN DE CAPACIDADES DEMOSTRADAS:")
        print(f"   ‚úÖ Geometr√≠a avanzada de c√≠rculos")
        print(f"   ‚úÖ Visualizaci√≥n diagn√≥stica completa")
        print(f"   ‚úÖ Optimizaci√≥n inteligente multi-algoritmo")
        print(f"   ‚úÖ Sistema de diagn√≥stico autom√°tico")
        print(f"   ‚úÖ Generaci√≥n autom√°tica de gr√°ficos")
        print(f"   ‚úÖ Tests completos del sistema")
        
        print(f"\nüéØ M√ìDULOS IMPLEMENTADOS:")
        print(f"   üìÅ core/circle_geometry.py - Geometr√≠a avanzada")
        print(f"   üìÅ core/circle_optimizer.py - Optimizaci√≥n inteligente")
        print(f"   üìÅ visualization/circle_plots.py - Visualizaci√≥n avanzada")
        print(f"   üìÅ tools/circle_diagnostics.py - Herramientas diagn√≥stico")
        
        print(f"\nüöÄ MEJORAS LOGRADAS:")
        print(f"   üîß Validaci√≥n geom√©trica completa")
        print(f"   üé® Visualizaci√≥n diagn√≥stica avanzada")
        print(f"   üß¨ Algoritmos de optimizaci√≥n m√∫ltiples")
        print(f"   üîç Herramientas de diagn√≥stico autom√°tico")
        print(f"   üìä M√©tricas avanzadas de c√≠rculos")
        print(f"   üéØ B√∫squeda autom√°tica de c√≠rculos √≥ptimos")
        
        print(f"\nüéâ ¬°SISTEMA DE C√çRCULOS COMPLETAMENTE MEJORADO!")
        print(f"üéâ ¬°TODO FUNCIONA PERFECTAMENTE!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN DEMOSTRACI√ìN: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("Iniciando demostraci√≥n del sistema avanzado de c√≠rculos...")
    
    # Ejecutar demo completa
    exito = demo_completo()
    
    if exito:
        print(f"\nüéä ¬°DEMOSTRACI√ìN EXITOSA!")
        print(f"El sistema de c√≠rculos ha sido completamente mejorado.")
    else:
        print(f"\n‚ö†Ô∏è  Demostraci√≥n completada con algunos errores.")
        print(f"Revisar los logs para m√°s detalles.")
    
    print(f"\nPresiona Enter para continuar...")
    input()
