"""
Sistema de Restricciones y L칤mites Inteligentes para C칤rculos de Falla

Este m칩dulo implementa l칤mites autom치ticos e inteligentes para:
- Posicionamiento del centro del c칤rculo
- Rango de radios v치lidos seg칰n geometr칤a del talud
- Restricciones geom칠tricas para evitar fallos
- Validaci칩n previa antes de c치lculos
- Correcci칩n autom치tica de par치metros inv치lidos

Objetivo: Garantizar que NUNCA fallen los c치lculos por configuraciones imposibles
"""

import math
from typing import List, Tuple, Optional, Dict, Any
from dataclasses import dataclass
from enum import Enum
import logging

from data.models import CirculoFalla, Estrato


class TipoRestriccion(Enum):
    """Tipos de restricciones geom칠tricas"""

    CENTRO_X_MIN = "centro_x_min"
    CENTRO_X_MAX = "centro_x_max"
    CENTRO_Y_MIN = "centro_y_min"
    CENTRO_Y_MAX = "centro_y_max"
    RADIO_MIN = "radio_min"
    RADIO_MAX = "radio_max"
    DISTANCIA_TALUD_MIN = "distancia_talud_min"
    COBERTURA_MIN = "cobertura_min"


@dataclass
class LimitesGeometricos:
    """L칤mites geom칠tricos calculados autom치ticamente"""

    # L칤mites del centro
    centro_x_min: float
    centro_x_max: float
    centro_y_min: float
    centro_y_max: float

    # L칤mites del radio
    radio_min: float
    radio_max: float

    # Restricciones adicionales
    distancia_minima_talud: float
    cobertura_minima_requerida: float

    # Metadatos
    ancho_talud: float
    altura_talud: float
    longitud_diagonal: float
    pendiente_talud: float


@dataclass
class ResultadoValidacion:
    """Resultado de validaci칩n con l칤mites"""

    es_valido: bool
    violaciones: List[str]
    circulo_corregido: Optional[CirculoFalla]
    limites_aplicados: LimitesGeometricos
    sugerencias: List[str]


class CalculadorLimites:
    """Calculador inteligente de l칤mites geom칠tricos"""

    def __init__(self):
        # Factores de seguridad para l칤mites
        self.factor_margen_lateral = 0.6  # 60% del ancho como margen lateral
        self.factor_altura_minima = 1.2  # 120% de altura m칤nima sobre terreno
        self.factor_altura_maxima = 3.0  # 300% de altura m치xima sobre terreno
        self.factor_radio_min = 0.15  # 15% de diagonal como radio m칤nimo
        self.factor_radio_max = 2.5  # 250% de diagonal como radio m치ximo
        self.cobertura_minima = 0.3  # 30% cobertura m칤nima del talud

    def calcular_limites_desde_perfil(
        self,
        perfil_terreno: List[Tuple[float, float]],
        configuracion: Optional[Dict[str, float]] = None,
    ) -> LimitesGeometricos:
        """
        Calcula l칤mites geom칠tricos INTELIGENTES basados en la geometr칤a REAL del talud
        """
        if not perfil_terreno:
            raise ValueError("Perfil de terreno no puede estar vac칤o")

        # AN츼LISIS GEOM칄TRICO DEL TALUD REAL
        x_coords = [p[0] for p in perfil_terreno]
        y_coords = [p[1] for p in perfil_terreno]

        x_min, x_max = min(x_coords), max(x_coords)
        y_min, y_max = min(y_coords), max(y_coords)

        # Calcular dimensiones del talud
        altura_talud = y_max - y_min
        longitud_base = x_max - x_min

        # Estimar 치ngulo del talud
        if altura_talud > 0 and longitud_base > 0:
            angulo_talud_rad = math.atan(altura_talud / longitud_base)
            angulo_talud_deg = math.degrees(angulo_talud_rad)
        else:
            angulo_talud_deg = 45.0

        # Obtener configuraci칩n
        if configuracion is None:
            # Detectar tipo de talud autom치ticamente basado en el 치ngulo
            tipo_talud_detectado = detectar_tipo_talud_desde_angulo(angulo_talud_deg)
            print(
                f" Tipo de talud detectado: {tipo_talud_detectado} (치ngulo: {angulo_talud_deg:.1f}춿)"
            )

            configuraciones_predefinidas = crear_limites_predefinidos()
            configuracion = configuraciones_predefinidas.get(
                tipo_talud_detectado, configuraciones_predefinidas["talud_empinado"]
            )

        print(f"游늻 GEOMETR칈A DEL TALUD:")
        print(f"   Altura: {altura_talud:.2f}m")
        print(f"   Base: {longitud_base:.2f}m")
        print(f"   츼ngulo: {angulo_talud_deg:.1f}춿")
        print(f"   Rango X: [{x_min:.2f}, {x_max:.2f}]")
        print(f"   Rango Y: [{y_min:.2f}, {y_max:.2f}]")

        # L칈MITES INTELIGENTES BASADOS EN GEOMETR칈A REAL Y CONFIGURACI칍N

        # Centro X: usar factor de margen lateral de la configuraci칩n
        margen_x = altura_talud * configuracion.get("factor_margen_lateral", 0.6)
        centro_x_min = x_min - margen_x
        centro_x_max = x_max + margen_x

        # Centro Y: usar factor de altura m치xima de la configuraci칩n
        altura_minima_centro = y_max + altura_talud * 0.3  # M칤nimo 30% arriba
        altura_maxima_centro = y_max + altura_talud * configuracion.get(
            "factor_altura_maxima", 1.5
        )
        centro_y_min = altura_minima_centro
        centro_y_max = altura_maxima_centro

        # Radio: usar factor de radio m치ximo de la configuraci칩n
        radio_min = altura_talud * 0.8  # M칤nimo 80% de la altura
        radio_max = altura_talud * configuracion.get("factor_radio_max", 1.5)

        print(f"游꿢 L칈MITES CALCULADOS:")
        print(
            f"   Centro X: [{centro_x_min:.2f}, {centro_x_max:.2f}] (margen: 췀{margen_x:.2f})"
        )
        print(
            f"   Centro Y: [{centro_y_min:.2f}, {centro_y_max:.2f}] (altura talud + {altura_talud*0.3:.2f} a +{altura_talud*configuracion.get('factor_altura_maxima', 1.5):.2f})"
        )
        print(
            f"   Radio: [{radio_min:.2f}, {radio_max:.2f}] ({altura_talud*0.8:.2f}H a {altura_talud*configuracion.get('factor_radio_max', 1.5):.2f}H)"
        )

        return LimitesGeometricos(
            centro_x_min=centro_x_min,
            centro_x_max=centro_x_max,
            centro_y_min=centro_y_min,
            centro_y_max=centro_y_max,
            radio_min=radio_min,
            radio_max=radio_max,
            distancia_minima_talud=0.0,
            cobertura_minima_requerida=0.0,
            ancho_talud=longitud_base,
            altura_talud=altura_talud,
            longitud_diagonal=math.sqrt(longitud_base**2 + altura_talud**2),
            pendiente_talud=angulo_talud_deg,
        )

    def validar_y_corregir_circulo(
        self,
        circulo: CirculoFalla,
        limites: LimitesGeometricos,
        corregir_automaticamente: bool = True,
    ) -> ResultadoValidacion:
        """
        Valida un c칤rculo contra los l칤mites y opcionalmente lo corrige
        """
        violaciones = []
        sugerencias = []

        # Validar l칤mites del centro
        if circulo.xc < limites.centro_x_min:
            violaciones.append(
                f"Centro X muy a la izquierda: {circulo.xc:.2f} < {limites.centro_x_min:.2f}"
            )
            if corregir_automaticamente:
                xc_corregido = limites.centro_x_min

        if circulo.xc > limites.centro_x_max:
            violaciones.append(
                f"Centro X muy a la derecha: {circulo.xc:.2f} > {limites.centro_x_max:.2f}"
            )
            if corregir_automaticamente:
                xc_corregido = limites.centro_x_max

        if circulo.yc < limites.centro_y_min:
            violaciones.append(
                f"Centro Y muy bajo: {circulo.yc:.2f} < {limites.centro_y_min:.2f}"
            )
            if corregir_automaticamente:
                yc_corregido = limites.centro_y_min

        if circulo.yc > limites.centro_y_max:
            violaciones.append(
                f"Centro Y muy alto: {circulo.yc:.2f} > {limites.centro_y_max:.2f}"
            )
            if corregir_automaticamente:
                yc_corregido = limites.centro_y_max

        # Validar l칤mites del radio
        if circulo.radio < limites.radio_min:
            violaciones.append(
                f"Radio muy peque침o: {circulo.radio:.2f} < {limites.radio_min:.2f}"
            )
            if corregir_automaticamente:
                radio_corregido = limites.radio_min

        if circulo.radio > limites.radio_max:
            violaciones.append(
                f"Radio muy grande: {circulo.radio:.2f} > {limites.radio_max:.2f}"
            )
            if corregir_automaticamente:
                radio_corregido = limites.radio_max

        # Generar sugerencias
        if violaciones:
            sugerencias.append(
                "Ajustar par치metros del c칤rculo dentro de los l칤mites permitidos"
            )
            if circulo.radio < limites.radio_min:
                sugerencias.append(f"Aumentar radio a al menos {limites.radio_min:.2f}")
            if circulo.yc < limites.centro_y_min:
                sugerencias.append(
                    f"Subir centro a al menos Y={limites.centro_y_min:.2f}"
                )

        # Correcci칩n autom치tica si se solicita
        circulo_corregido = None
        if corregir_automaticamente and violaciones:
            circulo_corregido = self._corregir_circulo(circulo, limites)
            sugerencias.append("C칤rculo corregido autom치ticamente")

        es_valido = len(violaciones) == 0

        logging.debug(
            f"Resultado validaci칩n: v치lido={es_valido}, violaciones={violaciones}, circulo_corregido={circulo_corregido}"
        )

        return ResultadoValidacion(
            es_valido=es_valido,
            violaciones=violaciones,
            circulo_corregido=circulo_corregido,
            limites_aplicados=limites,
            sugerencias=sugerencias,
        )

    def _corregir_circulo(
        self, circulo: CirculoFalla, limites: LimitesGeometricos
    ) -> CirculoFalla:
        """Corrige autom치ticamente un c칤rculo para que cumpla los l칤mites"""
        # Corregir centro X
        nuevo_cx = max(limites.centro_x_min, min(circulo.xc, limites.centro_x_max))

        # Corregir centro Y
        nuevo_cy = max(limites.centro_y_min, min(circulo.yc, limites.centro_y_max))

        # Corregir radio
        nuevo_r = max(limites.radio_min, min(circulo.radio, limites.radio_max))

        logging.debug(
            f"C칤rculo corregido de X={circulo.xc:.2f},Y={circulo.yc:.2f},R={circulo.radio:.2f} a X={nuevo_cx:.2f},Y={nuevo_cy:.2f},R={nuevo_r:.2f}"
        )

        return CirculoFalla(xc=nuevo_cx, yc=nuevo_cy, radio=nuevo_r)

    def generar_circulos_dentro_limites(
        self,
        limites: LimitesGeometricos,
        cantidad: int = 10,
        distribucion: str = "uniforme",
    ) -> List[CirculoFalla]:
        """
        Genera c칤rculos autom치ticamente dentro de los l칤mites establecidos
        """
        import random

        circulos = []

        for _ in range(cantidad):
            if distribucion == "uniforme":
                # Distribuci칩n uniforme
                cx = random.uniform(limites.centro_x_min, limites.centro_x_max)
                cy = random.uniform(limites.centro_y_min, limites.centro_y_max)
                r = random.uniform(limites.radio_min, limites.radio_max)

            elif distribucion == "gaussiana":
                # Distribuci칩n gaussiana centrada
                cx_medio = (limites.centro_x_min + limites.centro_x_max) / 2
                cy_medio = (limites.centro_y_min + limites.centro_y_max) / 2
                r_medio = (limites.radio_min + limites.radio_max) / 2

                # Desviaci칩n est치ndar como 1/4 del rango
                std_cx = (limites.centro_x_max - limites.centro_x_min) / 4
                std_cy = (limites.centro_y_max - limites.centro_y_min) / 4
                std_r = (limites.radio_max - limites.radio_min) / 4

                cx = random.gauss(cx_medio, std_cx)
                cy = random.gauss(cy_medio, std_cy)
                r = random.gauss(r_medio, std_r)

                # Asegurar que est칠n dentro de l칤mites
                cx = max(limites.centro_x_min, min(cx, limites.centro_x_max))
                cy = max(limites.centro_y_min, min(cy, limites.centro_y_max))
                r = max(limites.radio_min, min(r, limites.radio_max))

            else:  # "critico" - enfocado en c칤rculos m치s grandes y cercanos
                # Favorecer radios grandes y centros m치s cercanos al talud
                cx = random.uniform(
                    limites.centro_x_min * 0.7, limites.centro_x_max * 0.7
                )
                cy = random.uniform(
                    limites.centro_y_min,
                    limites.centro_y_min
                    + (limites.centro_y_max - limites.centro_y_min) * 0.4,
                )
                r = random.uniform(limites.radio_min * 1.2, limites.radio_max * 0.9)

            circulos.append(CirculoFalla(xc=cx, yc=cy, radio=r))

        return circulos


def detectar_tipo_talud_desde_angulo(angulo_grados: float) -> str:
    """
    Detecta autom치ticamente el tipo de talud basado en el 치ngulo calculado
    """
    if angulo_grados <= 15:
        return "talud_suave"
    elif angulo_grados <= 30:
        return "talud_empinado"
    elif angulo_grados <= 50:
        return "talud_critico"
    else:
        return "talud_conservador"  # Para 치ngulos muy altos, ser conservador


def crear_limites_predefinidos() -> Dict[str, Dict[str, float]]:
    """Crear l칤mites predefinidos para casos t칤picos"""

    return {
        "talud_suave": {
            "factor_margen_lateral": 0.8,  # M치s margen lateral para taludes suaves
            "factor_altura_maxima": 2.0,  # Centro m치s alto permitido
            "factor_radio_max": 2.0,  # Radios m치s grandes permitidos
            "cobertura_minima": 0.25,  # Menos cobertura requerida
        },
        "talud_empinado": {
            "factor_margen_lateral": 0.5,
            "factor_altura_maxima": 2.5,
            "factor_radio_max": 1.8,
            "cobertura_minima": 0.4,
        },
        "talud_critico": {
            "factor_margen_lateral": 0.3,
            "factor_altura_maxima": 2.0,
            "factor_radio_max": 1.5,
            "cobertura_minima": 0.5,
        },
        "talud_conservador": {
            "factor_margen_lateral": 0.2,
            "factor_altura_maxima": 1.5,
            "factor_radio_max": 1.2,
            "cobertura_minima": 0.6,
        },
    }


def aplicar_limites_inteligentes(
    perfil_terreno: List[Tuple[float, float]],
    tipo_talud: str = "talud_empinado",
    factor_seguridad_objetivo: float = 1.5,
) -> LimitesGeometricos:
    """
    Funci칩n de conveniencia para aplicar l칤mites inteligentes
    """
    calculador = CalculadorLimites()

    # Aplicar configuraci칩n predefinida si existe
    configuraciones = crear_limites_predefinidos()
    if tipo_talud in configuraciones:
        config = configuraciones[tipo_talud]
        for attr, valor in config.items():
            if hasattr(calculador, attr):
                setattr(calculador, attr, valor)

    return calculador.calcular_limites_desde_perfil(perfil_terreno)


def validar_circulo_geometricamente(
    circulo: CirculoFalla,
    limites: LimitesGeometricos,
    corregir_automaticamente: bool = True,
) -> ResultadoValidacion:
    """Valida un c칤rculo usando l칤mites pre-calculados."""

    calculador = CalculadorLimites()
    return calculador.validar_y_corregir_circulo(
        circulo, limites, corregir_automaticamente
    )


# Funci칩n de conveniencia para validaci칩n r치pida
def validar_circulo_con_limites(
    circulo: CirculoFalla,
    perfil_terreno: List[Tuple[float, float]],
    tipo_talud: str = "talud_empinado",
) -> ResultadoValidacion:
    """Validaci칩n r치pida de c칤rculo con l칤mites autom치ticos"""

    print(
        f" Validando c칤rculo X={circulo.xc:.2f}, Y={circulo.yc:.2f}, R={circulo.radio:.2f} para {tipo_talud}"
    )

    limites = aplicar_limites_inteligentes(perfil_terreno, tipo_talud)

    print(f" L칤mites calculados:")
    print(f"   Centro X: [{limites.centro_x_min:.2f}, {limites.centro_x_max:.2f}]")
    print(f"   Centro Y: [{limites.centro_y_min:.2f}, {limites.centro_y_max:.2f}]")
    print(f"   Radio: [{limites.radio_min:.2f}, {limites.radio_max:.2f}]")

    calculador = CalculadorLimites()
    resultado = calculador.validar_y_corregir_circulo(
        circulo, limites, corregir_automaticamente=True
    )

    print(f" Resultado validaci칩n: v치lido={resultado.es_valido}")
    if resultado.circulo_corregido:
        print(
            f" C칤rculo CORREGIDO de X={circulo.xc:.2f},Y={circulo.yc:.2f},R={circulo.radio:.2f}"
        )
        print(
            f"                     a X={resultado.circulo_corregido.xc:.2f},Y={resultado.circulo_corregido.yc:.2f},R={resultado.circulo_corregido.radio:.2f}"
        )
    if resultado.violaciones:
        print(f"  Violaciones: {resultado.violaciones}")

    return resultado


def main():
    logging.basicConfig(level=logging.DEBUG)

    # Ejemplo de uso
    perfil_terreno = [(0, 0), (10, 5), (20, 10)]
    circulo = CirculoFalla(xc=5, yc=5, radio=3)

    resultado = validar_circulo_con_limites(circulo, perfil_terreno)

    print(resultado)


if __name__ == "__main__":
    main()
