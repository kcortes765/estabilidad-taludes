"""
FASE 3: AN√ÅLISIS DE COMPATIBILIDAD GEOM√âTRICA
Encontrar geometr√≠as que funcionen tanto para validaci√≥n como para Bishop
"""

import math
from typing import List, Tuple, Optional
from data.models import CirculoFalla, Estrato, Dovela
from core.geometry import crear_dovelas
from core.bishop import calcular_fuerza_actuante_bishop, analizar_bishop

def probar_geometria_sistematica():
    """
    Prueba sistem√°ticamente diferentes geometr√≠as para encontrar una que funcione.
    """
    print("=" * 100)
    print("üîç B√öSQUEDA SISTEM√ÅTICA DE GEOMETR√çA V√ÅLIDA")
    print("=" * 100)
    
    # Perfil base simple
    perfil_base = [(0, 10), (10, 10), (20, 0), (40, 0)]
    estrato_base = Estrato(cohesion=15.0, phi_grados=20.0, gamma=18.0, nombre="Test")
    
    print("üèîÔ∏è Perfil del terreno fijo:")
    for x, y in perfil_base:
        print(f"   ({x}, {y})")
    
    # Matrices de b√∫squeda
    centros_x = [10, 15, 20, 25, 30]
    centros_y = [5, 10, 15, 20, 25]
    radios = [10, 15, 20, 25, 30]
    
    geometrias_validas = []
    
    print(f"\nüî¨ TESTANDO {len(centros_x) * len(centros_y) * len(radios)} COMBINACIONES...")
    print(f"{'XC':<3} {'YC':<3} {'R':<3} {'Dovelas':<8} {'Suma_F':<8} {'FS':<6} {'Estado'}")
    print("-" * 50)
    
    contador = 0
    for xc in centros_x:
        for yc in centros_y:
            for radio in radios:
                contador += 1
                
                circulo = CirculoFalla(xc=xc, yc=yc, radio=radio)
                
                try:
                    # Verificar si puede generar dovelas
                    dovelas = crear_dovelas(circulo, perfil_base, estrato_base, num_dovelas=8)
                    
                    if len(dovelas) < 3:  # Muy pocas dovelas
                        estado = "‚ùå Pocas"
                        suma_f = "N/A"
                        fs = "N/A"
                    else:
                        # Calcular suma de fuerzas actuantes
                        fuerzas = [calcular_fuerza_actuante_bishop(d) for d in dovelas]
                        suma_f = sum(fuerzas)
                        
                        if suma_f <= 0:
                            estado = "‚ùå F‚â§0"
                            fs = "N/A"
                        else:
                            # Intentar an√°lisis Bishop completo
                            try:
                                resultado = analizar_bishop(circulo, perfil_base, estrato_base, num_dovelas=8)
                                if resultado.es_valido and resultado.convergio:
                                    fs = resultado.factor_seguridad
                                    estado = "‚úÖ V√ÅLIDA"
                                    geometrias_validas.append((xc, yc, radio, suma_f, fs, len(dovelas)))
                                else:
                                    estado = "‚ùå NoConv"
                                    fs = "N/A"
                            except Exception as e:
                                estado = f"‚ùå Error"
                                fs = "N/A"
                
                    print(f"{xc:<3} {yc:<3} {radio:<3} {len(dovelas) if 'dovelas' in locals() else 0:<8} "
                          f"{suma_f if isinstance(suma_f, (int, float)) else suma_f:<8} {fs:<6} {estado}")
                
                except Exception as e:
                    print(f"{xc:<3} {yc:<3} {radio:<3} {'0':<8} {'N/A':<8} {'N/A':<6} ‚ùå Error")
    
    # Reporte de geometr√≠as v√°lidas
    print(f"\n‚úÖ GEOMETR√çAS V√ÅLIDAS ENCONTRADAS: {len(geometrias_validas)}")
    
    if geometrias_validas:
        print(f"\nüéØ MEJORES GEOMETR√çAS:")
        print(f"{'#':<2} {'Centro':<12} {'Radio':<6} {'Suma_F':<8} {'FS':<8} {'Dovelas':<8} {'Evaluaci√≥n'}")
        print("-" * 70)
        
        # Ordenar por factor de seguridad realista (1.0-2.5)
        geometrias_ordenadas = sorted(geometrias_validas, 
                                    key=lambda x: abs(x[4] - 1.5) if 0.8 <= x[4] <= 3.0 else 999)
        
        for i, (xc, yc, radio, suma_f, fs, ndov) in enumerate(geometrias_ordenadas[:5]):
            # Evaluar realismo
            if 0.8 <= fs <= 3.0:
                evaluacion = "‚≠ê EXCELENTE"
            elif 0.5 <= fs <= 4.0:
                evaluacion = "‚úÖ BUENO"
            else:
                evaluacion = "‚ö†Ô∏è Extremo"
                
            print(f"{i+1:<2} ({xc},{yc}){'':<7} {radio:<6} {suma_f:<8.1f} {fs:<8.3f} {ndov:<8} {evaluacion}")
        
        # Retornar la mejor geometr√≠a
        mejor = geometrias_ordenadas[0]
        return CirculoFalla(xc=mejor[0], yc=mejor[1], radio=mejor[2]), perfil_base, estrato_base
    
    else:
        print("‚ùå NO SE ENCONTRARON GEOMETR√çAS V√ÅLIDAS")
        return None, None, None

def probar_geometrias_alternativas():
    """
    Prueba geometr√≠as con perfiles de terreno alternativos.
    """
    print(f"\n" + "=" * 100)
    print("üîÑ PROBANDO PERFILES DE TERRENO ALTERNATIVOS")
    print("=" * 100)
    
    perfiles_test = [
        {
            "nombre": "Talud suave 3:1",
            "perfil": [(0, 15), (5, 15), (35, 5), (40, 5)],
            "circulo": CirculoFalla(xc=20, yc=25, radio=25)
        },
        {
            "nombre": "Talud escalonado",
            "perfil": [(0, 20), (10, 20), (15, 15), (25, 10), (40, 10)],
            "circulo": CirculoFalla(xc=20, yc=30, radio=25)
        },
        {
            "nombre": "Talud muy suave",
            "perfil": [(0, 12), (20, 8), (40, 8)],
            "circulo": CirculoFalla(xc=20, yc=20, radio=20)
        }
    ]
    
    estrato = Estrato(cohesion=15.0, phi_grados=20.0, gamma=18.0, nombre="Test")
    
    for config in perfiles_test:
        print(f"\nüìä {config['nombre']}:")
        
        try:
            resultado = analizar_bishop(config['circulo'], config['perfil'], estrato, num_dovelas=8)
            
            if resultado.es_valido and resultado.convergio:
                print(f"   ‚úÖ V√ÅLIDO: FS = {resultado.factor_seguridad:.3f}")
                
                # Verificar suma de fuerzas
                dovelas = crear_dovelas(config['circulo'], config['perfil'], estrato, num_dovelas=8)
                fuerzas = [calcular_fuerza_actuante_bishop(d) for d in dovelas]
                suma = sum(fuerzas)
                print(f"   Suma fuerzas: {suma:.1f} kN")
                print(f"   Dovelas: {len(dovelas)}")
                
                if suma > 0:
                    print(f"   üéØ GEOMETR√çA ALTERNATIVA V√ÅLIDA ENCONTRADA!")
                    return config['circulo'], config['perfil'], estrato
            else:
                print(f"   ‚ùå Inv√°lido o no convergi√≥")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
    
    return None, None, None

if __name__ == "__main__":
    # B√∫squeda sistem√°tica
    geometria_valida = probar_geometria_sistematica()
    
    if geometria_valida[0] is None:
        # Intentar perfiles alternativos
        geometria_valida = probar_geometrias_alternativas()
    
    if geometria_valida[0] is not None:
        print(f"\nüéâ GEOMETR√çA V√ÅLIDA FINAL ENCONTRADA:")
        print(f"   Centro: ({geometria_valida[0].xc}, {geometria_valida[0].yc})")
        print(f"   Radio: {geometria_valida[0].radio}")
        print(f"   Perfil: {geometria_valida[1]}")
        
        # Guardar para uso en evaluaciones
        print(f"\nüíæ Esta geometr√≠a puede usarse en evals_geotecnicos.py")
    else:
        print(f"\n‚ùå NO SE ENCONTR√ì NINGUNA GEOMETR√çA V√ÅLIDA")
        print(f"üí° Posible problema en la implementaci√≥n del m√©todo Bishop")
