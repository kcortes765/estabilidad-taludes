"""
Sistema de An√°lisis de Estabilidad de Taludes
==============================================

Interfaz principal para el an√°lisis de estabilidad de taludes
utilizando los m√©todos de Fellenius y Bishop Modificado.

Autor: Sistema de An√°lisis Geot√©cnico
Versi√≥n: 1.0
"""

import sys
import os
import math
from typing import Optional, Dict, Any

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Imports del sistema
from core.fellenius import fellenius_talud_homogeneo
from core.bishop import bishop_talud_homogeneo, comparar_bishop_fellenius
from core.geometry import crear_perfil_simple, crear_nivel_freatico_horizontal
from visualization.plotting import *
from data.models import CirculoFalla
import matplotlib.pyplot as plt


class SistemaAnalisisEstabilidad:
    """
    Clase principal para el an√°lisis de estabilidad de taludes.
    """
    
    def __init__(self):
        """Inicializar el sistema."""
        self.version = "1.0"
        self.configurar_visualizacion()
        print(f"üèóÔ∏è  Sistema de An√°lisis de Estabilidad de Taludes v{self.version}")
        print("=" * 60)
    
    def configurar_visualizacion(self):
        """Configurar el sistema de visualizaci√≥n."""
        try:
            configurar_estilo_grafico()
            self.config_grafico = ConfiguracionGrafico(figsize=(14, 10))
            print("‚úÖ Sistema de visualizaci√≥n configurado")
        except Exception as e:
            print(f"‚ö†Ô∏è Error configurando visualizaci√≥n: {e}")
            self.config_grafico = None
    
    def mostrar_menu_principal(self):
        """Mostrar el men√∫ principal del sistema."""
        print("\nüéØ MEN√ö PRINCIPAL")
        print("-" * 30)
        print("1. üìä An√°lisis R√°pido")
        print("2. üî¨ An√°lisis Detallado")
        print("3. üíß An√°lisis con Agua")
        print("4. üìà An√°lisis Param√©trico")
        print("5. üìã Ejemplos Predefinidos")
        print("6. ‚ÑπÔ∏è  Informaci√≥n del Sistema")
        print("0. üö™ Salir")
        print("-" * 30)
    
    def analisis_rapido(self):
        """Realizar un an√°lisis r√°pido con par√°metros t√≠picos."""
        print("\nüìä AN√ÅLISIS R√ÅPIDO")
        print("=" * 40)
        
        try:
            # Solicitar par√°metros b√°sicos
            print("Ingrese los par√°metros b√°sicos del talud:")
            
            altura = float(input("Altura del talud (m): "))
            angulo_talud = float(input("√Ångulo del talud (grados): "))
            cohesion = float(input("Cohesi√≥n del suelo (kPa): "))
            phi_grados = float(input("√Ångulo de fricci√≥n (grados): "))
            gamma = float(input("Peso espec√≠fico (kN/m¬≥): "))
            
            print(f"\nüîÑ Analizando talud de {altura}m con √°ngulo {angulo_talud}¬∞...")
            
            # An√°lisis Bishop
            resultado = bishop_talud_homogeneo(
                altura=altura,
                angulo_talud=angulo_talud,
                cohesion=cohesion,
                phi_grados=phi_grados,
                gamma=gamma,
                num_dovelas=10
            )
            
            # Mostrar resultados
            self.mostrar_resultados_rapidos(resultado)
            
            # Generar visualizaci√≥n
            if self.config_grafico:
                self.generar_visualizacion_rapida(altura, angulo_talud, resultado)
            
            return True
            
        except ValueError:
            print("‚ùå Error: Ingrese valores num√©ricos v√°lidos")
            return False
        except Exception as e:
            print(f"‚ùå Error en an√°lisis: {e}")
            return False
    
    def mostrar_resultados_rapidos(self, resultado):
        """Mostrar resultados de an√°lisis r√°pido."""
        fs = resultado.factor_seguridad
        
        print(f"\nüìä RESULTADOS DEL AN√ÅLISIS")
        print("-" * 35)
        print(f"Factor de Seguridad: {fs:.3f}")
        print(f"Iteraciones: {resultado.iteraciones}")
        print(f"Convergi√≥: {'S√≠' if resultado.convergio else 'No'}")
        print(f"Dovelas analizadas: {len(resultado.dovelas)}")
        
        # Interpretaci√≥n
        if fs >= 2.0:
            estado = "üü¢ MUY SEGURO"
            recomendacion = "Talud muy estable, proceder con confianza"
        elif fs >= 1.5:
            estado = "üü¢ SEGURO"
            recomendacion = "Talud estable, condiciones aceptables"
        elif fs >= 1.3:
            estado = "üü° ACEPTABLE"
            recomendacion = "Talud marginalmente estable, monitorear"
        elif fs >= 1.0:
            estado = "üü† MARGINAL"
            recomendacion = "Talud en l√≠mite, considerar refuerzo"
        else:
            estado = "üî¥ INESTABLE"
            recomendacion = "Talud inestable, redise√±o necesario"
        
        print(f"\nEstado: {estado}")
        print(f"Recomendaci√≥n: {recomendacion}")
    
    def generar_visualizacion_rapida(self, altura, angulo_talud, resultado):
        """Generar visualizaci√≥n para an√°lisis r√°pido."""
        try:
            # Crear geometr√≠a
            longitud_base = altura / math.tan(math.radians(angulo_talud))
            perfil = crear_perfil_simple(0.0, altura, longitud_base * 3, 0.0, 25)
            circulo = CirculoFalla(xc=longitud_base * 0.4, yc=altura * 1.1, radio=1.5 * altura)
            
            # Generar gr√°fico
            fig = graficar_resultado_bishop(perfil, circulo, resultado, self.config_grafico)
            print("‚úÖ Gr√°fico generado exitosamente")
            
            # Cerrar para liberar memoria
            plt.close('all')
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error generando gr√°fico: {e}")
    
    def analisis_detallado(self):
        """Realizar an√°lisis detallado con comparaci√≥n de m√©todos."""
        print("\nüî¨ AN√ÅLISIS DETALLADO")
        print("=" * 40)
        
        try:
            # Solicitar par√°metros detallados
            print("Ingrese los par√°metros del talud:")
            
            altura = float(input("Altura del talud (m): "))
            angulo_talud = float(input("√Ångulo del talud (grados): "))
            cohesion = float(input("Cohesi√≥n del suelo (kPa): "))
            phi_grados = float(input("√Ångulo de fricci√≥n (grados): "))
            gamma = float(input("Peso espec√≠fico (kN/m¬≥): "))
            num_dovelas = int(input("N√∫mero de dovelas (8-20): "))
            
            print(f"\nüîÑ Realizando an√°lisis completo...")
            
            # An√°lisis Bishop
            print("Ejecutando m√©todo de Bishop...")
            resultado_bishop = bishop_talud_homogeneo(
                altura=altura,
                angulo_talud=angulo_talud,
                cohesion=cohesion,
                phi_grados=phi_grados,
                gamma=gamma,
                num_dovelas=num_dovelas
            )
            
            # An√°lisis Fellenius (si es posible)
            print("Ejecutando m√©todo de Fellenius...")
            try:
                resultado_fellenius = fellenius_talud_homogeneo(
                    altura=altura,
                    angulo_talud=angulo_talud,
                    cohesion=cohesion,
                    phi_grados=phi_grados,
                    gamma=gamma,
                    num_dovelas=num_dovelas
                )
                fellenius_ok = True
            except Exception as e:
                print(f"‚ö†Ô∏è Fellenius no disponible: {e}")
                resultado_fellenius = None
                fellenius_ok = False
            
            # Mostrar resultados detallados
            self.mostrar_resultados_detallados(resultado_bishop, resultado_fellenius)
            
            # Generar visualizaci√≥n completa
            if self.config_grafico:
                self.generar_visualizacion_detallada(altura, angulo_talud, 
                                                   resultado_bishop, resultado_fellenius)
            
            return True
            
        except ValueError:
            print("‚ùå Error: Ingrese valores num√©ricos v√°lidos")
            return False
        except Exception as e:
            print(f"‚ùå Error en an√°lisis detallado: {e}")
            return False
    
    def mostrar_resultados_detallados(self, resultado_bishop, resultado_fellenius=None):
        """Mostrar resultados detallados."""
        print(f"\nüìä RESULTADOS DETALLADOS")
        print("=" * 45)
        
        # Resultados Bishop
        print(f"üîπ M√âTODO DE BISHOP MODIFICADO")
        print(f"   Factor de Seguridad: {resultado_bishop.factor_seguridad:.3f}")
        print(f"   Iteraciones: {resultado_bishop.iteraciones}")
        print(f"   Convergi√≥: {'S√≠' if resultado_bishop.convergio else 'No'}")
        print(f"   Dovelas: {len(resultado_bishop.dovelas)}")
        
        # Resultados Fellenius si est√°n disponibles
        if resultado_fellenius:
            print(f"\nüîπ M√âTODO DE FELLENIUS")
            print(f"   Factor de Seguridad: {resultado_fellenius.factor_seguridad:.3f}")
            print(f"   Momento Resistente: {resultado_fellenius.momento_resistente:.1f} kN¬∑m")
            print(f"   Momento Actuante: {resultado_fellenius.momento_actuante:.1f} kN¬∑m")
            
            # Comparaci√≥n
            diferencia = ((resultado_bishop.factor_seguridad - resultado_fellenius.factor_seguridad) / 
                         resultado_fellenius.factor_seguridad) * 100
            
            print(f"\nüîπ COMPARACI√ìN DE M√âTODOS")
            print(f"   Diferencia: {diferencia:+.1f}%")
            
            if abs(diferencia) < 5:
                print(f"   ‚úÖ M√©todos consistentes")
            elif diferencia > 0:
                print(f"   ‚ÑπÔ∏è  Bishop menos conservador")
            else:
                print(f"   ‚ÑπÔ∏è  Fellenius menos conservador")
        
        # An√°lisis de dovelas cr√≠ticas
        self.analizar_dovelas_criticas(resultado_bishop)
    
    def analizar_dovelas_criticas(self, resultado):
        """Analizar dovelas m√°s cr√≠ticas."""
        if not resultado.dovelas:
            return
        
        print(f"\nüîπ AN√ÅLISIS DE DOVELAS")
        
        # Encontrar dovela con mayor peso
        dovela_pesada = max(resultado.dovelas, key=lambda d: d.peso)
        
        # Encontrar dovela con mayor √°ngulo
        dovela_inclinada = max(resultado.dovelas, key=lambda d: abs(d.angulo_alpha))
        
        print(f"   Dovela m√°s pesada: {dovela_pesada.peso:.1f} kN (x={dovela_pesada.x_centro:.1f}m)")
        print(f"   Dovela m√°s inclinada: {math.degrees(dovela_inclinada.angulo_alpha):.1f}¬∞ (x={dovela_inclinada.x_centro:.1f}m)")
        print(f"   Rango de pesos: {min(d.peso for d in resultado.dovelas):.1f} - {max(d.peso for d in resultado.dovelas):.1f} kN")
    
    def generar_visualizacion_detallada(self, altura, angulo_talud, resultado_bishop, resultado_fellenius=None):
        """Generar visualizaci√≥n detallada."""
        try:
            # Crear geometr√≠a
            longitud_base = altura / math.tan(math.radians(angulo_talud))
            perfil = crear_perfil_simple(0.0, altura, longitud_base * 3, 0.0, 25)
            circulo = CirculoFalla(xc=longitud_base * 0.4, yc=altura * 1.1, radio=1.5 * altura)
            
            # Gr√°fico Bishop
            fig1 = graficar_resultado_bishop(perfil, circulo, resultado_bishop, self.config_grafico)
            print("‚úÖ Gr√°fico Bishop generado")
            
            # Gr√°fico comparativo si Fellenius est√° disponible
            if resultado_fellenius:
                fig2 = graficar_comparacion_metodos(perfil, circulo, resultado_fellenius, 
                                                  resultado_bishop, self.config_grafico)
                print("‚úÖ Gr√°fico comparativo generado")
            
            # Gr√°fico de convergencia
            if hasattr(resultado_bishop, 'historial_fs') and resultado_bishop.historial_fs:
                fig3 = graficar_convergencia_bishop(resultado_bishop.historial_fs, self.config_grafico)
                print("‚úÖ Gr√°fico de convergencia generado")
            
            # Cerrar gr√°ficos
            plt.close('all')
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en visualizaci√≥n detallada: {e}")
    
    def ejecutar_ejemplos(self):
        """Ejecutar ejemplos predefinidos."""
        print("\nüìã EJEMPLOS PREDEFINIDOS")
        print("=" * 35)
        print("1. üèóÔ∏è  Talud de carretera (caso simple)")
        print("2. üíß Talud con nivel fre√°tico")
        print("3. üìä An√°lisis param√©trico")
        print("0. ‚¨ÖÔ∏è  Volver al men√∫ principal")
        
        try:
            opcion = input("\nSeleccione un ejemplo: ")
            
            if opcion == "1":
                print("\nüîÑ Ejecutando ejemplo de talud simple...")
                os.system("python examples/caso_simple.py")
            elif opcion == "2":
                print("\nüîÑ Ejecutando ejemplo con agua...")
                os.system("python examples/caso_con_agua.py")
            elif opcion == "3":
                print("\nüîÑ Ejecutando an√°lisis param√©trico...")
                self.analisis_parametrico_interactivo()
            elif opcion == "0":
                return
            else:
                print("‚ùå Opci√≥n no v√°lida")
                
        except Exception as e:
            print(f"‚ùå Error ejecutando ejemplo: {e}")
    
    def analisis_parametrico_interactivo(self):
        """An√°lisis param√©trico interactivo."""
        print("\nüìà AN√ÅLISIS PARAM√âTRICO")
        print("=" * 35)
        
        try:
            # Par√°metros base
            altura = float(input("Altura base del talud (m): "))
            angulo_talud = float(input("√Ångulo base del talud (grados): "))
            phi_grados = float(input("√Ångulo de fricci√≥n base (grados): "))
            gamma = float(input("Peso espec√≠fico base (kN/m¬≥): "))
            
            # Par√°metro a variar
            print("\nSeleccione par√°metro a variar:")
            print("1. Cohesi√≥n")
            print("2. √Ångulo de fricci√≥n")
            print("3. Altura del talud")
            
            param_opcion = input("Opci√≥n: ")
            
            if param_opcion == "1":
                self.variar_cohesion(altura, angulo_talud, phi_grados, gamma)
            elif param_opcion == "2":
                self.variar_friccion(altura, angulo_talud, gamma)
            elif param_opcion == "3":
                self.variar_altura(angulo_talud, phi_grados, gamma)
            else:
                print("‚ùå Opci√≥n no v√°lida")
                
        except ValueError:
            print("‚ùå Error: Ingrese valores num√©ricos v√°lidos")
        except Exception as e:
            print(f"‚ùå Error en an√°lisis param√©trico: {e}")
    
    def variar_cohesion(self, altura, angulo_talud, phi_grados, gamma):
        """Variar cohesi√≥n y analizar efecto."""
        cohesiones = [10, 15, 20, 25, 30, 35, 40, 45, 50]
        
        print(f"\nüìä VARIACI√ìN DE COHESI√ìN")
        print(f"{'c (kPa)':<8} {'Fs':<8} {'Iteraciones':<12} {'Estado'}")
        print("-" * 40)
        
        for c in cohesiones:
            try:
                resultado = bishop_talud_homogeneo(
                    altura=altura,
                    angulo_talud=angulo_talud,
                    cohesion=c,
                    phi_grados=phi_grados,
                    gamma=gamma,
                    num_dovelas=8
                )
                
                fs = resultado.factor_seguridad
                iter_count = resultado.iteraciones
                
                if fs >= 1.5:
                    estado = "SEGURO"
                elif fs >= 1.3:
                    estado = "ACEPTABLE"
                elif fs >= 1.0:
                    estado = "MARGINAL"
                else:
                    estado = "INESTABLE"
                
                print(f"{c:<8} {fs:<8.3f} {iter_count:<12} {estado}")
                
            except Exception:
                print(f"{c:<8} {'ERROR':<8} {'-':<12} {'FALLO'}")
    
    def mostrar_informacion_sistema(self):
        """Mostrar informaci√≥n del sistema."""
        print(f"\n‚ÑπÔ∏è  INFORMACI√ìN DEL SISTEMA")
        print("=" * 40)
        print(f"Versi√≥n: {self.version}")
        print(f"M√©todos implementados:")
        print(f"  ‚Ä¢ M√©todo de Fellenius (ordinario)")
        print(f"  ‚Ä¢ M√©todo de Bishop Modificado")
        print(f"Capacidades:")
        print(f"  ‚Ä¢ An√°lisis de taludes homog√©neos")
        print(f"  ‚Ä¢ Consideraci√≥n de nivel fre√°tico")
        print(f"  ‚Ä¢ Visualizaci√≥n gr√°fica avanzada")
        print(f"  ‚Ä¢ An√°lisis param√©trico")
        print(f"  ‚Ä¢ Generaci√≥n de reportes")
        print(f"Desarrollado con Python y matplotlib")
    
    def ejecutar(self):
        """Ejecutar el sistema principal."""
        while True:
            try:
                self.mostrar_menu_principal()
                opcion = input("\nSeleccione una opci√≥n: ")
                
                if opcion == "1":
                    self.analisis_rapido()
                elif opcion == "2":
                    self.analisis_detallado()
                elif opcion == "3":
                    print("üíß An√°lisis con agua - Ejecute: python examples/caso_con_agua.py")
                elif opcion == "4":
                    self.analisis_parametrico_interactivo()
                elif opcion == "5":
                    self.ejecutar_ejemplos()
                elif opcion == "6":
                    self.mostrar_informacion_sistema()
                elif opcion == "0":
                    print("\nüëã ¬°Gracias por usar el Sistema de An√°lisis de Estabilidad!")
                    break
                else:
                    print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
                
                # Pausa para leer resultados
                if opcion in ["1", "2", "4", "6"]:
                    input("\nPresione Enter para continuar...")
                    
            except KeyboardInterrupt:
                print("\n\nüëã Sistema terminado por el usuario")
                break
            except Exception as e:
                print(f"\n‚ùå Error inesperado: {e}")
                input("Presione Enter para continuar...")


def main():
    """Funci√≥n principal."""
    try:
        sistema = SistemaAnalisisEstabilidad()
        sistema.ejecutar()
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        print("El sistema no pudo iniciarse correctamente")


if __name__ == "__main__":
    main()
